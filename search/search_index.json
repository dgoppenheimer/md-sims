{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["trimmer","stopWordFilter"]},"docs":[{"location":"","title":"Molecular Dynamics","text":"<p>text</p>"},{"location":"installation/","title":"Getting started","text":""},{"location":"installation/#getting-started","title":"Getting started","text":"<p>Material for MkDocs is a theme for MkDocs, a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with <code>pip</code>, the Python package manager. If not, we recommended using <code>docker</code>.</p>"},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#with-pip","title":"with pip recommended","text":"<p>Material for MkDocs can be installed with <code>pip</code>:</p> Latest8.x <pre><code>pip install mkdocs-material\n</code></pre> <pre><code>pip install mkdocs-material==\"8.*\" # (1)!\n</code></pre> <ol> <li> <p>Material for MkDocs uses semantic versioning1, which is why it's a     good idea to limit upgrades to the current major version.</p> <p>This will make sure that you don't accidentally [upgrade to the next major version], which may include breaking changes that silently break your site. Additionally, you can use <code>pip freeze</code> to create a lockfile, so builds are reproducible at all times:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Now, the lockfile can be used for installation:</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> </ol> <p>This will automatically install compatible versions of all dependencies: MkDocs, Markdown, Pygments and Python Markdown Extensions. Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.</p>"},{"location":"installation/#with-docker","title":"with docker","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the  <code>latest</code> version with:</p> Latest8.x <pre><code>docker pull squidfunk/mkdocs-material\n</code></pre> <pre><code>docker pull squidfunk/mkdocs-material:8\n</code></pre> <p>The <code>mkdocs</code> executable is provided as an entry point and <code>serve</code> is the  default command. If you're not familiar with Docker don't worry, we have you covered in the following sections.</p> <p>The following plugins are bundled with the Docker image:</p> <ul> <li>mkdocs-minify-plugin</li> <li>mkdocs-redirects</li> </ul> How to add plugins to the Docker image? <p>Material for MkDocs only bundles selected plugins in order to keep the size of the official image small. If the plugin you want to use is not included,  create a new <code>Dockerfile</code> and extend the official Docker image:</p> <pre><code>FROM squidfunk/mkdocs-material\nRUN pip install ...\n</code></pre> <p>Next, you can build the image with the following command:</p> <pre><code>docker build -t squidfunk/mkdocs-material .\n</code></pre> <p>The new image can be used exactly like the official image.</p> <p> Apple Silicon (M1) and  Raspberry Pi</p> <p>The official Docker image is only available for <code>linux/amd64</code>. We recommend the third-party image by @afritzler if you want to run Material for MkDocs via Docker on <code>arm64</code> or <code>armv7</code>, as it is automatically built on every release:</p> <pre><code>docker pull ghcr.io/afritzler/mkdocs-material\n</code></pre>"},{"location":"installation/#with-git","title":"with git","text":"<p>Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git\n</code></pre> <p>The theme will reside in the folder <code>mkdocs-material/material</code>. When cloning from <code>git</code>, you must install all required dependencies yourself:</p> <pre><code>pip install -e mkdocs-material\n</code></pre> <ol> <li> <p>Note that improvements of existing features are sometimes released as patch releases, like for example improved rendering of content tabs, as they're not considered to be new features.\u00a0\u21a9</p> </li> </ol>"},{"location":"material-license/","title":"License","text":""},{"location":"material-license/#license-for-material-for-mkdocs","title":"License for Material for MkDocs","text":"<p>MIT License</p> <p>Copyright \u00a9 2016-2022 Martin Donath</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"course/","title":"Practical Molecular Dynamics","text":"<p>This section covers the course Practical Molecular Dynamics. This course will mostly use Google Colaboratory, but other free, cloud-based solutions to the need for computing resources will be introduced as needed. The course is designed around the use of Jupyter notebooks that are available at the Molecular Dynamics GitHub repository, and the course contents can be viewed on the Molecular Dynamics website.</p>"},{"location":"course/course-organization/","title":"Course Organization","text":""},{"location":"course/course-organization/#introduction","title":"Introduction","text":""},{"location":"course/course-organization/#course-learning-goals","title":"Course Learning Goals","text":"<p>Info</p> <p>Each lab will have a set of specific learning outcomes (learning objectives) that will be listed at the beginning of the lab.</p>"},{"location":"course/course-organization/#course-learning-outcomes-learning-objectives","title":"Course Learning Outcomes (Learning Objectives)","text":""},{"location":"course/course-organization/#course-summary","title":"Course Summary","text":"Part Lab Topic Date Part 1 Getting Started Lab 00 Introduction and account setup Lab 01 Jupyter and Colaboratory Lab 02 analyzing PDB files Lab 03 NGLView Lab 04 Plotly Lab 05 VMD Lab 05.5 PyMOL (optional) Part 2 MD Simulations Lab 06 Introduction to MD Lab 07 GROMACS tutorial Lab 08 GROMACS Lab 09 OpenMM Lab 10 NAMD and CHARMM Part 3 Trajectory Analysis Lab 11 Introduction to MD analysis Lab 12 RMSD and RMSF Lab 13 MDAnalysis Lab 14 MD-Task and <code>gmx</code> Part 4 Example Publications Lab 15"},{"location":"course/course-organization/#course-outline","title":"Course Outline","text":"<ul> <li> <p>Part 1. Getting Started</p> <ul> <li>introduction to Jupyter on Colab</li> <li>working with PDB files<ul> <li>PDBFixer</li> <li>grep, awk, VSCode</li> </ul> </li> <li>viewing protein structures<ul> <li>NGLView</li> <li>PyMOL</li> <li>VMD</li> <li>Chimera/ChimeraX (optional) --probably delete this</li> </ul> </li> </ul> </li> <li> <p>Part 2. Molecular Dynamics Simulations</p> <ul> <li>introduction<ul> <li>simulation programs<ul> <li>OpenMM</li> <li>GROMACS</li> <li>Acellera ACEMD</li> <li>AMBER (optional)</li> <li>NAMD (optional)</li> </ul> </li> <li>force fields<ul> <li>AMBER</li> <li>CHARMM</li> <li>OpenFF</li> <li>CGenFF</li> <li>GAFF2</li> </ul> </li> </ul> </li> <li>simulations<ul> <li>protein simulations</li> <li>ligand-protein simulations<ul> <li>docking (Vina/Smina, Dock, MTiOpenScreen)</li> </ul> </li> <li>membrane protein simulations (optional)</li> </ul> </li> </ul> </li> <li> <p>Part 3. Trajectory Analysis</p> <ul> <li>introduction</li> <li> <p>software tools</p> <ul> <li>MDAnalysis- correlationplus</li> <li>GROMACS</li> <li>MD-Task (may not work on colab)</li> <li>MDTraj</li> <li>Bio3D (optional)</li> </ul> </li> <li> <p>analyses</p> <ul> <li>RMSD, RMSF</li> <li>Ramachandran plot</li> <li>principle component analysis (PCA)</li> <li>residue interaction network (RIN) analysis</li> <li>perturbation response scanning (PRS)</li> <li>dynamic cross-correlation (MD-Task) (may not work on colab)</li> </ul> </li> </ul> </li> <li> <p>Part 4. Example Publications</p> </li> </ul>"},{"location":"course/course-organization/#additional-resources","title":"Additional Resources","text":"<p>See this course from the summer of 2021, CHEM 181 Introduction to Molecular Simulation.</p> <p>CHEM 181 Syllabus</p> <p>The course is set up for 5 weeks.</p> <p>bash tutorial PDBFixer</p>"},{"location":"course/course-organization/#getting-started-resources","title":"Getting Started Resources","text":""},{"location":"course/course-organization/#the-command-line-and-shells","title":"The Command Line and Shells","text":""},{"location":"course/course-organization/#text-editors","title":"Text Editors","text":"<ul> <li>VS Code</li> <li>VS Code on the web</li> <li>BBEdit</li> </ul>"},{"location":"course/course-organization/#graphing-with-plotly","title":"Graphing with Plotly","text":"<ul> <li>Plotly Fundamentals</li> <li>Plotly Tutorials</li> <li>Jupyter Notebook Tutorial in Python</li> </ul>"},{"location":"course/course-organization/#questions-about-protein-structure-validation","title":"Questions About Protein Structure Validation","text":"<p>See Structure validation practical - answers</p>"},{"location":"course/course-organization/#other-courses","title":"Other Courses","text":"<p>Molecular Dynamics simulations in Python Molecular Modeling Practical</p>"},{"location":"course/course-organization/#docking","title":"Docking","text":"<p>Use the webserver below to see if your identified ligand will be modified by a human cytochrome p450.</p> <p>https://doi.org/10.1021/acs.jcim.1c00144</p> <p>Open Lab.01 IBM 3202 for preparing protein structure (<code>pdb</code>) files with <code>grep</code> </p> <p>also look at the Cancer Biology PyMOL docking project for multiple examples of <code>grep</code>-ping files for fun and profit.  </p> <p>get <code>.pdb</code> file \u2192 ? \u2192 profit!</p>"},{"location":"course/course-organization/#integration-with-canvas","title":"Integration with Canvas","text":"<p>See the IllumiDesk site for information.</p>"},{"location":"course/course-organization/#course-notes","title":"Course Notes","text":"<p>Start with GROMACS and OpenMM. Add Amber and NAMD later.</p>"},{"location":"course/course-organization/#cur-possibilities","title":"CUR Possibilities","text":"<p>Use AlphaFold2 and/or I-TASSER to model structures from metagenomes (ocean, human microbiome). Use MD simulations as part of validation.</p> <p>See ResearchGate: Is it necessary to run molecular dynamic simulation after modelling of unknown protein structure?</p> Structure Refinement <p>GOAP, ModRefine, GalaxyRefine</p> assess the reliability of predicted model <p>RAMA plots, ProTSAV, SAVES, Molprobity</p> MD Simulations <p>Stability of protein structure, and RMSD</p> <p>See Assessment of ab initio models of protein complexes by molec...</p> <p>Citation: Cheung NJ, Yu W (2018) De novo protein structure prediction using ultra-fast molecular dynamics simulation. PLoS ONE 13(11): e0205819. https://doi.org/10.1371/journal.pone.0205819</p>"},{"location":"course/course-organization/#other-notes","title":"Other Notes","text":"<p>Use Alphafold 2.0 to get the 3D structure of your protein of interest (whether or not the structure has been solved by other means).</p> <p>Use the PASSer 2.0 server to locate potential allosteric sites for docking.</p> <p>Dock subsets of the Zinc chemical database using Gnina.</p> <p>Optional: Use MTiOpenScreen instead</p> <p>Validate the docking using molecular dynamics simulations.</p> <p>Analyze simulations with and without inhibitor.</p> <p>Prepare paper using template Prepare online slide presentation (optional: prepare YouTube presentation using template)</p> <p>AI in Drug Discovery</p>"},{"location":"course/lab00-preparation/","title":"Lab 00","text":""},{"location":"course/lab00-preparation/#lab-00-preparation-for-molecular-dynamics","title":"Lab 00: Preparation for Molecular Dynamics","text":"<p>This exercise prepares you for using Jupyter notebooks and Google Colaboratory (Colab).</p>"},{"location":"course/lab00-preparation/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this exercise, you will be able to do the following:</p> <ul> <li>Sign up for an additional personal Google account that will be used for this course.</li> <li>Download and install the Google Chrome web browser.</li> <li>Use the provided workflow for accessing and saving course notebooks.</li> </ul>"},{"location":"course/lab00-preparation/#requirements","title":"Requirements","text":"<p>To complete the assignments for this course, you will need the following:</p>"},{"location":"course/lab00-preparation/#requirement-1-a-molecular-dynamics-google-account","title":"Requirement 1: A Molecular Dynamics Google account","text":"<p>This will allow you to save your notebooks to a dedicated Google Drive that does not have any personal or UF files on it. Below are the instructions for getting your personal Molecular Dynamics Google account.</p> <ol> <li> <p>Go to Google.com and click <code>Sign in</code>, then <code>Create account</code>.</p> </li> <li> <p>If you already have a Google account, Click on your profile picture, then click on <code>Add another account</code>.</p> </li> </ol> <p></p> <p>{{&lt; imgproc add-account.png Resize \"350x\" &gt;}} Add another account {{&lt; /imgproc &gt;}}</p> <ul> <li> <p>Then click <code>Create account</code> and <code>For myself</code></p> </li> <li> <p>Fill in the appropriate information for your <code>First name</code>, <code>Last name</code>, and <code>Password</code>. For the <code>Username</code>, use the following format: <code>&lt;last name&gt;&lt;first initial&gt;.mdynamics</code>, but do not use spaces or the <code>&lt; &gt;</code> characters, and notice the <code>dot</code> before <code>mdynamics</code>. For example, my <code>Username</code> is:</p> </li> </ul> <pre><code>oppenheimerd.mdynamics@gmail.com\n</code></pre> <ol> <li>Follow the remaining instructions and you should be ready to go.</li> </ol>"},{"location":"course/lab00-preparation/#requirement-2-a-chrome-web-browser","title":"Requirement 2: A Chrome web browser","text":"<p>Working with colab and Google drive (G-drive) works best in the Chrome web browser. If you don't already have it installed, go to the Chrome download page to download and install it on your computer.</p> <p>{{% alert title=\"Note\" color=\"primary\" %}} You can also use the Firefox browser, but you must sign in to the correct Google account once you launch the notebook. {{% /alert %}}</p> <p>Always use your mdynamics Google account to complete these assignments.</p>"},{"location":"course/lab00-preparation/#workflow-summary","title":"Workflow Summary","text":"<p>Here is a quick summary of how you will access course materials. Additional detailed instructions can be found below the summary.</p> <ol> <li>Go to the Molecular Dynamics GitHub repository to access the Jupyter notebooks that contain the tutorials and assignments. You only need to do this once for each assigment.</li> <li>Choose the assignment you want to work on and click the  button. The notebook will open in your (Chrome) web browser.</li> <li>Change accounts to your <code>&lt;last name&gt;&lt;first initial&gt;.mdynamics@gmail.com</code> account.</li> <li>Connect to a runtime and mount your G-drive.</li> <li>Save a copy of the notebook to your G-drive.</li> <li>Rename the notebook by prepending <code>&lt;last name&gt;&lt;first initial&gt;-</code> (without the spaces or <code>&lt;</code> <code>&gt;</code> characters) to the notebook name. For example: <code>oppenheimerd-Lab01-intro-jupyter.ipynb</code>.</li> </ol>"},{"location":"course/lab00-preparation/#slightly-more-detailed-workflow-instructions","title":"Slightly More Detailed Workflow Instructions","text":"<ol> <li>Open your web browser and go to the Molecular Dynamics GitHub repository. Scroll down to the Practical Molecular Dynamics <code>README.md</code> section to see the table listing all the assignments.</li> <li>Click the  button to open the notebook you want to work on.</li> <li>Sign in (or change accounts) to your <code>&lt;last name&gt;&lt;first initial&gt;.mdynamics@gmail.com</code> account.</li> <li>Connect to a runtime by clicking the <code>Connect</code> button. You should be connected to Google's computers in a few seconds. Then mount your G-drive.</li> </ol> <p>{{&lt; imgproc connect.png Resize \"750x\" &gt;}} Connect to a runtime {{&lt; /imgproc &gt;}}</p> <p>{{&lt; imgproc connected.png Resize \"750x\" &gt;}} Connected! {{&lt; /imgproc &gt;}}</p> <p>{{&lt; imgproc mount-g-drive.png Resize \"750x\" &gt;}} Mount your G-drive {{&lt; /imgproc &gt;}}</p> <p>When asked <code>Permit this notebook to access your Google Drive files?</code>, click the <code>Connect to Google Drive</code> button. In the next popup window, choose your <code>last name&gt;&lt;first initial&gt;.mdynamics@gmail.com</code> account.</p> <p>{{&lt; imgproc choose-account.png Resize \"450x\" &gt;}} choose your mdynamics@gmail.com account {{&lt; /imgproc &gt;}}</p> <p>Click <code>Allow</code> when asked by Google Drive for desktop wants to access your Google Account.</p> <p>{{&lt; imgproc allow-access.png Resize \"350x\" &gt;}} Allow access {{&lt; /imgproc &gt;}}</p> <p>When the cell is done running and your G-drive is mounted, you should see <code>Mounted at /content/drive</code> in the output area of the cell.</p> <ol> <li>Save a copy of the notebook to your G-drive. Click the folder icon on the left of the notebook to see your mounted drive and other files that you can access in this notebook.</li> </ol> <p>{{&lt; imgproc folder-icon.png Resize \"550x\" &gt;}} Click the folder icon {{&lt; /imgproc &gt;}}</p> <p>{{&lt; imgproc files.png Resize \"550x\" &gt;}} See your files! {{&lt; /imgproc &gt;}}</p> <ol> <li>Rename the notebook by prepending <code>&lt;last name&gt;&lt;first initial&gt;-</code> (without the spaces or <code>&lt;</code> <code>&gt;</code> characters) to the notebook name. For example: <code>oppenheimerd-Lab01-intro-jupyter.ipynb</code>.</li> </ol> <p>{{&lt; imgproc rename-notebook.png Resize \"550x\" &gt;}} Rename your notebook {{&lt; /imgproc &gt;}}</p> <p>Once your notebook is renamed, save a copy to your G-drive.</p>"},{"location":"course/lab00-preparation/#adding-images-to-text-cells-in-jupyter-notebooks","title":"Adding Images to Text Cells in Jupyter Notebooks","text":"<p>I uploaded all the images to a public GitHub repository, notebook-images, so I can use them on this site with the course Jupyter notebooks. Using a public repository ensures that the images will still be available when the notebook is shared.</p> <p>Here is the code I used to generate the images in the Jupyter notebooks. This code is a bit different from standard <code>Markdown</code> in that it allows the images to be resized rather than just filling the container.</p> <p>Info</p> <p>Code for the Jupyter notebook:  </p> <p>Click profile</p> <pre><code>[&lt;img src=\"https://github.com/dgoppenheimer/notebook-images/blob/main/g-account-profile.png?raw=true\" alt=\"Profile picture\" width=\"350\" /&gt;](https://github.com/dgoppenheimer/notebook-images/blob/main/g-account-profile.png?raw=true)\n</code></pre> <p>Add another account</p> <pre><code>[&lt;img src=\"https://github.com/dgoppenheimer/notebook-images/blob/main/add-account.png?raw=true\" alt=\"add another account\" width=\"250\" /&gt;](https://github.com/dgoppenheimer/notebook-images/blob/main/add-account.png?raw=true)\n</code></pre> <p>Connect to a runtime</p> <pre><code>[&lt;img src=\"https://github.com/dgoppenheimer/notebook-images/blob/main/connect.png?raw=true\" alt=\"connect to a runtime\" width=\"750\" /&gt;](https://github.com/dgoppenheimer/notebook-images/blob/main/connect.png?raw=true)\n</code></pre> <p>Connected!</p> <pre><code>[&lt;img src=\"https://github.com/dgoppenheimer/notebook-images/blob/main/connected.png?raw=true\" alt=\"connected\" width=\"750\" /&gt;](https://github.com/dgoppenheimer/notebook-images/blob/main/connected.png?raw=true)\n</code></pre>"},{"location":"course/lab01-jupyter-colab/","title":"Lab 01","text":""},{"location":"course/lab01-jupyter-colab/#lab-01-introduction-to-jupyter-notebooks-and-colab","title":"Lab 01: Introduction to Jupyter notebooks and Colab","text":"<p> In this exercise you will learn the basic features of Jupyter notebooks and Google Colaboratory (Colab).</p>"},{"location":"course/lab01-jupyter-colab/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this exercise, you will be able to do the following:</p> <ul> <li>Open a notebook and connect to Colab.</li> <li>Create, move, and edit code and text cells.</li> <li>Use <code>markdown</code> to format text</li> <li>Save a notebook to Google Drive.</li> </ul>"},{"location":"course/lab01-jupyter-colab/#welcome-to-google-colaboratory","title":"Welcome to Google Colaboratory!","text":"<p>In this exercise you will learn about Jupyter notebooks and Google Colaboratory (Colab).</p> <p>What is Google Colaboratory?</p> <p>Google Colaboratory (or \u201cColab\u201d for short) is a cloud-based platform that allows users to run software on high-performance computer clusters for free. Colab uses the Jupyter notebook format, which allows users to create and store code, computing output, visualizations, and text within a web browser.</p> <p>Watch the video, below, to get a brief introduction to what Colab offers.</p> <p></p>"},{"location":"course/lab01-jupyter-colab/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>Jupyter notebooks are documents that allow you to create, view, and run code. These notebooks are typically web-based and can contain code, text, equations, images, videos, and more. The document you are reading now is a Jupyter notebook. Importantly, these notebooks are interactive--you can change the code, run it and view the new output. Also, you can store the output of the code in the notebook and share it with others. This ability to document what code you executed, and the resulting output is important for reproducibility.</p> <p>Jupyter notebooks can be run locally on your own computer, and can use many different programming languages. However, we will be used a web-based notebook that uses the python language.</p>"},{"location":"course/lab01-jupyter-colab/#cells","title":"Cells","text":"<p>Jupyter notebooks are made up of two kinds of cells: code cells and text cells.</p>"},{"location":"course/lab01-jupyter-colab/#adding-and-moving-cells","title":"Adding and moving cells","text":"<p>New code or text cells can be added by using the <code>+ CODE</code> and <code>+ TEXT</code> buttons that show up when you hover at the bottom of a cell. You can also find these buttons in the toolbar above the notebook.</p> <p></p> <p>You can move a cell by selecting it and clicking the up arrow button(which moves selected cell up) or the down arrow button (which moves the selected cell down) in the toolbar in the upper right of a selected cell.</p> <p></p>"},{"location":"course/lab01-jupyter-colab/#text-cells","title":"Text Cells","text":"<p>Text cells are used to annotate your code, describe your workflow, provide instructions, or add additional information to your notebook. Text cells are formatted using Markdown, a text to <code>html</code> conversion tool widely used to format text on the web. With Markdown, you can add text formatting such as bold and italics, add images, links, and more!</p> <p>For more information, please visit the Markdown Guide, especially the Getting Started section. We will be using Markdown throughout this course to format our text cells.</p>"},{"location":"course/lab01-jupyter-colab/#code-cells","title":"Code Cells","text":"<p>Below is a code cell. Once the toolbar button indicates <code>CONNECTED</code>, click in the cell to select it and execute the contents in the following ways:</p> <ul> <li>Click the <code>Play</code> icon in the upper left corner of the code cell; it will appear when you hover over the <code>[ ]</code>.</li> <li>Type <code>Cmd/Ctrl+Enter</code> to run the cell in place</li> <li>Type <code>Shift+Enter</code> to run the cell and move to the next cell. A new cell will be added if there are no remaining cells.</li> <li>Type <code>Alt+Enter</code> to run the cell and insert a new code cell immediately below it.</li> </ul> <p>Additional options for running some or all cells in your notebook can be found in the <code>Runtime</code> menu.</p> <pre><code># This is a comment in a code cell\n# It is preceded by a hash symbol (#)\n# Comments are useful for annotating parts of your code\n# Comments are ignored when the code cell is run\ncodons = 154\nprotein_MW = codons * 110\nprint(protein_MW)\n</code></pre> <p>Click the button, Open in Colab Run the cell, Mount Google Drive Wait until the notebook connects with Google's computers</p> <p>g-create </p>"},{"location":"course/lab01-jupyter-colab/#g-create-using-extension-to-control-size","title":"g-create using extension to control size","text":"<p>mount-drive </p> <p>run-anyway </p>"},{"location":"course/lab01-jupyter-colab/#run-anyway-left","title":"run-anyway Left","text":"<p>Herp derpsum merpus ler derperker herpderpsmer. Pee sherper dee serp. Merpus re se ter derpsum me sherper herpler. Cerp herp derpy herpderpsmer tee. Herpem de mer, zerpus derpler sherpus der herpderpsmer ner. Merpus nerpy sherlamer derp! Me der berps, derp sherlamer. Ner derpsum se derpler nerpy. Derperker se derpus perper sherper. Re nerpy de derps ter. Herpderpsmer ler derpy ner pee derpsum herpem, cerp berp? Serp er zerpus merp berps terpus derperker cerp ler derp? Sherlamer derpler re, sherp derpus. Mer ner serp derpus cerp derpler ler perper. Herderder derp derpsum mer!</p> <p></p> <p></p> <p>(You may need to mount your drive, again)</p>"},{"location":"course/lab02-gromacs/","title":"Lab02 gromacs","text":"<p>Using GROMACS</p> <p>Most of this information comes from the GROMACS Tutorial Lysozyme in Water put together by Justin A. Lemkul, Ph.D.</p> <p>I'll use human cofilin. NMR structures are available from the RCSB PDB: 1Q8X, 1Q8G, and a crystal structure, 4BEX.</p> <p>Here are tutorials on preparing your structure for MD simulations:</p> <p>Preparing Your System for Molecular Dynamics (MD) and Molecular Dynamics Simulation Tutorial.</p> <p>Points to examine:</p> <ol> <li>Are there waters or other solvent molecules present?</li> <li>Are ions or ligands present?</li> <li>Are there any amino acids or loops missing?<ul> <li>Check the <code>.pdb</code> file in a text editor (VS Code) for entries under <code>MISSING</code>.</li> </ul> </li> <li>Are any amino acids present as rotomers?</li> <li>Are multiple chains present?</li> </ol> <pre><code># Rename \"PDB general atom name\" to \"CHARMM-specific atom name\"\n#   HIS =&gt; HSD (but not included in this protein)\n#   CD1 atom of ILE =&gt; CD\n#   C-terminal carboxyl oxygen O and OXT =&gt; OT1 and OT2\n[atomselect top \"resname HIS\"                      ] set resname HSD\n[atomselect top \"resname ILE and name CD1\"         ] set name CD\n[atomselect top \"chain A and resid 56 and name O\"  ] set name OT1\n[atomselect top \"chain A and resid 56 and name OXT\"] set name OT2\n</code></pre> <ul> <li>proper orientations of glutamine and asparagine amide groups</li> <li>protonation state and side chain orientation of histidine residues are consistent</li> <li>no other problems exist with the system</li> </ul> <p>The Schrodinger Protein Preparation Wizard enables this increased efficiency in structure preparation by including tools which allow you to:</p> <ul> <li>Automatically import full PDB files \u2014 or any chain within a PDB file \u2014 from local databases or the PDB website</li> <li>Automatically add missing hydrogen atoms</li> <li>Correct metal ionization states to ensure proper formal charge and force field treatment</li> <li>Enumerate bond orders to HET groups</li> <li>Remove co-crystallized water molecules at the user's discretion</li> <li>Cap protein termini with ACE and NMA residues</li> <li>Highlight residues with missing atoms or multiple occupancies</li> <li>Pre-process structures for Prime, Schr\u00f6dinger's program for protein structure prediction</li> <li>Easily navigate between different residues, HET groups, and chains using intuitive graphical tools</li> <li>Quickly and easily determine the most likely ligand protonation state as well as the energy penalties associated with alternate protonation states</li> <li>Determine optimal protonation states for histidine residues</li> <li>Correct potentially transposed heavy atoms in arginine, glutamine, and histidine side chains</li> <li> <p>Optimize the protein's hydrogen bond network by means of a systematic, cluster-based approach, which greatly decreases preparation times</p> </li> <li> <p>Alternates. Residues with alternate locations and/or ambiguous sequence identities are examined, and those with the highest occupancy are chosen.</p> </li> <li>Termini. Protein chain C- or N-termini that need to be charged or capped require attention. Similarly, for DNA structures the terminal phosphate may only have three oxygen atoms bonded to the phosphorus. Accordingly, an additional oxygen atom should be added.</li> <li>Sometimes loops are very disordered and appear as breaks in the chain. It may be possible to use a loop library to model a replacement.</li> <li>Hydrogen atoms are usually not visible and so need to be added and checked. In particular, hydrogen atoms on heteroatoms and water molecules should be checked, especially at the active site where the local environment may influence a residue\u2019s pKa value.</li> <li>Ligand. Novel ligands in particular need checking to confirm that atoms and bond orders are correct.</li> <li>Conformation. Check that torsions are reasonable and there are no clashes. Charge. The charge on all ionizable groups should be checked.</li> </ul> <p>Although it is often useful to examine the structure using molecular visualization software like ChimeraX or PyMOL, it is possible to miss some of these things depending on how the software chooses to display them. For example, opening an NMR structure in PyMOL will only display one structure until you <code>split_chains</code>. Also, multiple rotamers will not usually be displayed.</p>"},{"location":"course/lab02-gromacs/#other-resources","title":"Other Resources","text":"<p>Practical 2: Introduction to protein simulations provides useful information</p>"},{"location":"course/lab0x1-install-gromacs/","title":"Lab 0x1","text":""},{"location":"course/lab0x1-install-gromacs/#installing-gromacs-on-colab","title":"Installing GROMACS on Colab","text":"<p>These instructions were largely adapted from Installing Software on Google Colab for IBM3202 tutorials. I updated the GROMACS version, and to do that I needed to upgrade <code>cmake</code>.</p> <p>Installation of this software takes about 40 min. Therefore, we will save the compiled software on Google Drive to save time later.</p> <p>VERY IMPORTANT FIRST STEP: Go to the Menu \u2192 Runtime \u2192 Change Runtime Type and choose GPU!</p> <p>Note: a page reload will be required. This is okay.</p> <p>First, let's confirm that we are in the correct directory. Remember to run <code>bash</code> commands, we need to prepend the command with a <code>!</code>.</p> code inputoutput <pre><code>!pwd\n</code></pre> <pre><code>/content\n</code></pre> <p>Okay. Great.</p>"},{"location":"course/lab0x1-install-gromacs/#download-gromacs","title":"Download GROMACS","text":"<p>Here we will download the software from the GROMACS website.</p> code inputoutput <pre><code>#Download GROMACS 2021.5\n!wget https://ftp.gromacs.org/gromacs/gromacs-2021.5.tar.gz\n</code></pre> <pre><code>--2022-04-11 13:03:29--  https://ftp.gromacs.org/gromacs/gromacs-2021.5.tar.gz\nResolving ftp.gromacs.org (ftp.gromacs.org)... 130.237.11.165, 2001:6b0:1:1191:216:3eff:fec7:6e30\nConnecting to ftp.gromacs.org (ftp.gromacs.org)|130.237.11.165|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 38023772 (36M) [application/x-gzip]\nSaving to: \u2018gromacs-2021.5.tar.gz\u2019\ngromacs-2021.5.tar. 100%[===================&gt;]  36.26M  17.6MB/s    in 2.1s    \n2022-04-11 13:03:32 (17.6 MB/s) - \u2018gromacs-2021.5.tar.gz\u2019 saved [38023772/38023772]\n</code></pre>"},{"location":"course/lab0x1-install-gromacs/#install-gromacs","title":"Install GROMACS","text":""},{"location":"course/lab0x1-install-gromacs/#extract-the-targz-file","title":"Extract the <code>.tar.gz</code> File","text":"<p>Use <code>ipython magic</code> syntax to run several <code>bash</code> commands in the same code cell.</p> code inputoutput <pre><code>%%bash\n# extracting the software\ntar xfz gromacs-2021.5.tar.gz\necho \"GROMACS extraction completed\"\n</code></pre> <pre><code>GROMACS extraction completed\n</code></pre>"},{"location":"course/lab0x1-install-gromacs/#create-and-enter-the-build-directory","title":"Create and Enter the <code>build</code> Directory","text":"code inputoutput <pre><code># create and enter the build directory\n%cd gromacs-2021.5\n%mkdir build\n%cd build\n</code></pre> <pre><code>/content/gromacs-2021.5\n/content/gromacs-2021.5/build\n</code></pre>"},{"location":"course/lab0x1-install-gromacs/#upgrade-cmake","title":"Upgrade <code>cmake</code>","text":"<p>Check the current version of <code>cmake</code>.</p> code inputoutput <pre><code>!cmake --version\n</code></pre> <pre><code>cmake version 3.12.0\n</code></pre> <p>According to the GROMACS documentation:</p> <p>Check that you have CMake version 3.13 or later.</p> <p>Therefore, we need to upgrade <code>cmake</code>. First, remove the previous version.</p> code inputoutput <pre><code># remove the old version\n!apt remove cmake\n</code></pre> <pre><code>Reading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following packages were automatically installed and are no longer required:\ncmake-data libarchive13 liblzo2-2 librhash0 libuv1\nUse 'apt autoremove' to remove them.\nThe following packages will be REMOVED:\ncmake\n0 upgraded, 0 newly installed, 1 to remove and 39 not upgraded.\nAfter this operation, 17.5 MB disk space will be freed.\n(Reading database ... 156210 files and directories currently installed.)\nRemoving cmake (3.10.2-1ubuntu2.18.04.2) ...\nProcessing triggers for man-db (2.8.3-2ubuntu0.1) ...\n</code></pre> <p>Install the current version of <code>cmake</code>.</p> code inputoutput <pre><code># Install the new version of `cmake`\n!pip install cmake --upgrade\n</code></pre> <pre><code>Requirement already satisfied: cmake in /usr/local/lib/python3.7/dist-packages (3.12.0)\nCollecting cmake\nDownloading cmake-3.22.3-py2.py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (22.5 MB)\n|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22.5 MB 45.1 MB/s \nInstalling collected packages: cmake\nAttempting uninstall: cmake\nFound existing installation: cmake 3.12.0\nUninstalling cmake-3.12.0:\nSuccessfully uninstalled cmake-3.12.0\nSuccessfully installed cmake-3.22.3\n</code></pre> <p>Note that <code>apt</code> failed to uninstall <code>cmake</code>. I may change the command to <code>!pip uninstall cmake</code>. Check the version (just to be sure).</p> code inputoutput <pre><code>!cmake --version\n</code></pre> <pre><code> cmake version 3.22.3\n</code></pre> <p>Okay. That's done.</p>"},{"location":"course/lab0x1-install-gromacs/#build-gromacs","title":"Build GROMACS","text":"<p>Run the commands for <code>cmake</code>, <code>make</code>, <code>make check</code>, and <code>make install</code>.</p> cmakemakemake checkmake install <pre><code>#@title make\n%%bash\n# had to change -DGMX_GPU=on to -DGMX_GPU=CUDA.\ncmake .. -DGMX_BUILD_OWN_FFTW=ON -DGMX_GPU=CUDA -DCMAKE_INSTALL_PREFIX=/content/gromacs-2021\n</code></pre> <pre><code># this takes a while\n%%bash\nmake\n</code></pre> <pre><code>%%bash\nmake check\n# ~31 min\n</code></pre> <pre><code>%%bash\nmake install\n</code></pre>"},{"location":"course/lab0x1-install-gromacs/#test-gromacs","title":"Test GROMACS","text":"<p>Let's check that GROMACS was installed correctly.</p> code inputoutput <pre><code>##Checking that GROMACS was successfully installed\n%%bash\nsource /content/gromacs-2021/bin/GMXRC\ngmx -h\n</code></pre> <pre><code>/content/drive/MyDrive/IBM3202/gromacs-2021/bin/GMXRC: line 13: /content/gromacs-2021/bin/GMXRC.bash: No such file or directory\nbash: line 2: gmx: command not found\n</code></pre> <p>Okay. We need to change the path in <code>GMXRC</code>. On line 13, change</p> fromto <pre><code>. /content/gromacs-2021/bin/GMXRC.bash\n</code></pre> <pre><code>. /content/drive/MyDrive/IBM3202/gromacs-2021/bin/GMXRC.bash\n</code></pre> <p>We also need to fix the path in <code>GMXRC.bash</code>. Change line 53</p> fromto <pre><code>GMXPREFIX=/content/gromacs-2021/bin/GMXRC.bash\n</code></pre> <pre><code>GMXPREFIX=/content/drive/MyDrive/IBM3202/gromacs-2021\n</code></pre> <p>Check that GROMACS works, again.</p> code inputoutput <pre><code># Checking that our GROMACS works\n%%bash\nsource /content/drive/MyDrive/IBM3202/gromacs-2021/bin/GMXRC\ngmx -h\n</code></pre> <pre><code>bash: line 2: /content/drive/MyDrive/IBM3202/gromacs-2021/bin/gmx: Permission denied\n</code></pre> <p>Ouch! I forgot that you have to give executable permissions to newly installed programs. Run the following code cell.</p> <pre><code>!chmod 755 -R /content/drive/MyDrive/IBM3202/gromacs-2021\n</code></pre> <p>Now let's test it again.</p> code inputoutput <pre><code># Checking that our GROMACS works\n%%bash\nsource /content/drive/MyDrive/IBM3202/gromacs-2021/bin/GMXRC\ngmx -h\n</code></pre> <pre><code>SYNOPSIS\ngmx [-[no]h] [-[no]quiet] [-[no]version] [-[no]copyright] [-nice &lt;int&gt;]\n[-[no]backup]\nOPTIONS\nOther options:\n-[no]h                     (no)\nPrint help and quit\n-[no]quiet                 (no)\nDo not print common startup info or quotes\n-[no]version               (no)\nPrint extended version information and quit\n-[no]copyright             (yes)\nPrint copyright information on startup\n-nice   &lt;int&gt;              (19)\nSet the nicelevel (default depends on command)\n-[no]backup                (yes)\nWrite backups if output files exist\nAdditional help is available on the following topics:\ncommands    List of available commands\nselections  Selection syntax and usage\nTo access the help, use 'gmx help &lt;topic&gt;'.\nFor help on a command, use 'gmx help &lt;command&gt;'.\n:-) GROMACS - gmx, 2021.5 (-:\n</code></pre> <p>Sweet!</p> <p>Okay. Now we have to remember that whenever we log off of Colab, we will have to remember to change to our working directory and give permissions again to <code>gmx</code>. Put the following code cells near the top of your Colab notebook in a section titled Important Cells to Run.</p> change to working directorygive permissions to <code>gmx</code> <pre><code># This gets you into the correct directory\n%cd /content/drive/MyDrive/\n</code></pre> <pre><code># Give permissions to run gmx\n!chmod 755 -R /content/drive/MyDrive/IBM3202/gromacs-2021\n</code></pre>"},{"location":"course/lab0x1-install-gromacs/#using-gromacs","title":"Using GROMACS","text":"<p>As an example of setting up and running a molecular dynamics simulation, we will follow the excellent tutorial by Justin Lemkul, Lysozyme in water, but we will use a different protein. Here we will use the human prion protein (RCSB ID: 1qLz).</p> <p>Download the protein from the RCSB database.</p> code inputoutput <pre><code>!wget https://www.rcsb.org/structure/1qLz\n</code></pre> <pre><code>--2022-03-24 17:34:39--  https://www.rcsb.org/structure/1qLz\nResolving www.rcsb.org (www.rcsb.org)... 128.6.159.248\nConnecting to www.rcsb.org (www.rcsb.org)|128.6.159.248|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 72560 (71K) [text/html]\nSaving to: \u20181qLz\u2019\n1qLz               100%[===================&gt;]  70.86K  --.-KB/s    in 0.08s   \n2022-03-24 17:34:39 (936 KB/s) - \u20181qLz\u2019 saved [72560/72560]\n</code></pre> <p>Important</p> <p>It is often difficult to distinguish between an uppercase <code>O</code> (Oh) and the number <code>0</code> (zero), or a lowercase <code>l</code> (el) and the number <code>1</code> (one). The RCSB IDs in the database are not case sensitive. Therefore it is always a good idea to write RCSB IDs in all lowercase except for the lowercase l (el), which you should write as uppercase (L). This way you will not mistakenly download the wrong protein for your simulations.</p>"},{"location":"course/lab0x1-install-gromacs/#preparing-structure-files","title":"Preparing Structure Files","text":"<p>The 1QLZ protein structure was solved by NMR, which means that 20 structures were deposited in one <code>.pdb</code> file. Here we will use the stream editor, <code>sed</code>, because <code>grep</code> is designed for use on lines of text and we want to collect a block of text[1].</p> <p>The <code>.pdb</code> file has the following format:</p> <pre><code>MODEL        1                                                                  \nATOM      1  N   LEU A 125       4.329 -12.012   2.376  1.00  0.00           N  \nATOM      2  CA  LEU A 125       5.029 -10.769   2.674  1.00  0.00           C  \n...\nENDMDL                                                                          \nMODEL        2                                                                  \nATOM      1  N   LEU A 125       5.962 -12.281  -0.586  1.00  0.00           N  \nATOM      2  CA  LEU A 125       6.228 -10.948  -0.052  1.00  0.00           C  \n...\n</code></pre> <p>Note that each model is preceded by a line that designates the model number (<code>MODEL 1</code>, <code>MODEL 2</code>, and so on) and ends with the line <code>ENDMDL</code>. We can use these as starting and stopping patterns for each model that we want to extract from this file.</p> <p>Regex, which is short for Regular Expressions[2] is used for search and replace of characters in certain text files (but cannot be used for <code>html</code> files--see Stackoverflow). In our case we want to extract the text between the patterns <code>MODEL 1</code> and <code>ENDMDL</code> (including the patterns) into a new file. I got the code, below, from Stackoverflow, but had to modify it for using <code>sed</code> on Mac OSX (you need the <code>-E</code> option). The <code>-E</code> option may or may not be necessary for Colab.</p> <pre><code># Here is the sed command\nsed -E -n '/^MODEL +1 /,/^ENDMDL/w 1qLz-model1.pdb' 1qLz.pdb\n</code></pre>"},{"location":"course/lab0x1-install-gromacs/#explanation-of-the-sed-command","title":"Explanation of the <code>sed</code> Command","text":"<ul> <li><code>sed -E</code> use extended regular expressions  </li> <li><code>-n</code> do not echo every line to output</li> <li><code>' ... '</code> enclose the search commands in single quotes</li> <li><code>/START/,/STOP/</code> pattern to search for; we start at lines that begin with <code>MODEL 1</code> and end with lines that begin with <code>ENDMDL</code> </li> <li><code>^</code> is Regex for the beginning of a line  </li> <li><code>&lt;space&gt; +</code> search for 1 or more spaces  </li> <li><code>1 &lt;space&gt;</code>, search for the number 1 followed by a space (or else you get model 19)  </li> <li><code>w</code> write the output to the following file</li> <li><code>1qLz-model1.pdb</code> file name of the output file  </li> <li><code>1qLz.pdb</code> is the input file</li> </ul> <p>1. It is possible to extract blocks of text using <code>grep</code> but it is not as easy as using <code>sed</code>.\u21a9</p> <p>2. The Python Regex Cheat Sheet has a list of many common regular expressions and is a useful reference.\u21a9</p>"},{"location":"course/lab0x2-pdb-files/","title":"Exploring and Modifying `.pdb` Files","text":""},{"location":"course/lab0x2-pdb-files/#exploring-and-modifying-pdb-files","title":"Exploring and Modifying <code>.pdb</code> Files","text":""},{"location":"course/lab0x2-pdb-files/#formative-assessments","title":"Formative Assessments","text":"<p>70-80%</p> <ul> <li>questions during exercise</li> <li>also provide practice exams--relatively easy to provide pdb files to play with</li> </ul>"},{"location":"course/lab0x2-pdb-files/#summative-assessments","title":"Summative Assessments","text":"<p>20-30%</p> <ul> <li>higher stakes</li> <li>should have a (generous) time limit</li> <li>can I grade these pdb file manipulations by diff?</li> <li>open book (internet)?</li> </ul>"},{"location":"course/lab0x2-pdb-files/#fixing-missing-loops","title":"Fixing Missing Loops","text":""},{"location":"course/lab0x2-pdb-files/#web-servers-for-fixing-missing-loops","title":"Web Servers for Fixing Missing Loops","text":""},{"location":"course/lab0x2-pdb-files/#cli-programs-for-fixing-missing-loops","title":"CLI Programs for Fixing Missing Loops","text":""},{"location":"course/lab0x2-pdb-files/#additional-information-about-fixing-missing-loops","title":"Additional Information about Fixing Missing Loops","text":""},{"location":"course/lab0x2-pdb-files/#adding-hydrogens","title":"Adding Hydrogens","text":""},{"location":"course/lab0x2-pdb-files/#web-servers-for-adding-hydrogens","title":"Web Servers for Adding Hydrogens","text":"<p>The MolProbity webserver is excellent for assigning hydrogens to structures and providing a measure of how accurate the resulting model is including identifying rotamers, etc.</p> <p>The What If webserver can assign hydrogens to heavy atoms and optimize the H-bonding network.</p>"},{"location":"course/lab0x2-pdb-files/#cli-programs-for-adding-hydrogens","title":"CLI Programs for Adding Hydrogens","text":"<p>gmx pdb2gmx is part of the GROMACS installation and can be used in Jupyter Notebooks. It is powerful and has sensible defaults. It is probably worth using it on a protein structure file and running the result through MolProbity.</p> <p>The command line program Reduce can be used to add hydrogens to protein structures. This is the program that is used on the MolProbity website. See more at the Reduce Overview web site.</p> <p>PDBFixer is part of the OpenMM suite of programs. Note: PDBFixer sometimes messes up rotomers.</p> <p>Open Babel can be used to add polar hydrogens to protein structures using the command line. This could be potentially used within a Jupyter Notebook, but I need to check on how decisions about hydrogen additions are made.</p> <p>UCSF Chimera is a full service molecular graphics program that can add hydrogens and can fix atypical amino acids (using DockPrep).</p>"},{"location":"course/lab0x2-pdb-files/#additional-information-about-adding-hydrogens","title":"Additional Information about Adding Hydrogens","text":"<p>The Protopedia webpage on Hydrogen in macromolecular models has a nice introduction to hydrogens in protein structures.</p>"},{"location":"course/lab0x2-pdb-files/#additional-reading","title":"Additional Reading","text":"<p>Introduction to PDB Data</p> <p>Introduction to Protein Data Bank Format</p> <p>Protein Structure Analysis: Extra Information in a Protein Data Bank File Good information about how to parse a pdb file, and how to calculate a B-factor.</p> <p>Atomic Coordinate Entry Format Version 3.3 from the World Wide Protein Data Bank website. This has an excellent explanation of the format of <code>.pdb</code> files.</p> <p>Also see Atomic Coordinate Entry Format Version 3.3color pink, resid 59-63</p>"},{"location":"course/lab0x3-nglview/","title":"Using `nglview` in Colab","text":""},{"location":"course/lab0x3-nglview/#using-nglview-in-colab","title":"Using <code>nglview</code> in Colab","text":""},{"location":"course/lab0x3-nglview/#nglview-in-colab-assignment","title":"NGLView in Colab Assignment","text":"<p>This assignment is focused on using <code>NGLView</code> in Colab notebooks to view protein structures.</p>"},{"location":"course/lab0x3-nglview/#learning-objectives","title":"Learning Objectives","text":"<p>By the end of this assignment, students will be able to:</p> <ul> <li>Install <code>NGLView</code> in a Colab notebook.</li> <li>Load a protein structure file into <code>NGLView</code>.</li> <li>Display multiple representations of a protein and ligand.</li> <li>Save protein images as <code>.png</code> files.</li> </ul>"},{"location":"course/lab0x3-nglview/#nglview-notes","title":"NGLView Notes","text":"<p>nglview at GitHub This may not work correctly on Google Colab to view trajectories.</p> <p>nglviewer</p> <p>I may need to install <code>nglview-js-widgets</code>, too, separately.</p> <p>nglview </p> <p>It should work in google colab now, see this post</p>"},{"location":"course/lab0x3-nglview/#installation","title":"Installation","text":"<pre><code>!pip install -q nglview pytraj\nfrom google.colab import output\noutput.enable_custom_widget_manager()\n</code></pre> <pre><code>import nglview\nview = nglview.show_pdbid(\"3pqr\")  # load \"3pqr\" from RCSB PDB and display viewer widget\nview\n</code></pre>"},{"location":"course/lab0x3-nglview/#usage","title":"Usage","text":"<p>nglview tutorial pdf </p> <p>From the OxCompBio notebook. This did not work on Colab.</p> <pre><code># Import NGLView\nimport nglview\n# Select as your protein the 1HSG pdb entry\nprotein_view = nglview.show_pdbid('1hsg')\nprotein_view.gui_style = 'ngl'\n#Uncomment the command below to add a hyperball representation of the crystal water oxygens in grey\n#protein_view.add_hyperball('HOH', color='grey', opacity=1.0)\n#Uncomment the command below to color the protein according to its secondary structure with opacity 0.6\n#protein_view.update_cartoon(color='sstruc', opacity=0.6)\n# Let's change the display a little bit\nprotein_view.parameters = dict(camera_type='orthographic', clip_dist=0)\n# Set the background colour to black\nprotein_view.background = 'black'\n# Call protein_view to visualize the trajectory\nprotein_view\n</code></pre>"},{"location":"course/lab0x3-nglview/#representations","title":"Representations","text":"<pre><code># reset representation\nview.representations = []\nview.parameters = {'theme': 'dark'}\nview.add_representation('licorice', selection='not hydrogen')\nview.add_representation('cartoon')\n</code></pre> <pre><code>view.add_representation('cartoon', selection='protein')\n# or shorter\nview.add_cartoon(selection=\"protein\")\nview.add_surface(selection=\"protein\", opacity=0.3)\n# specify color\nview.add_cartoon(selection=\"protein\", color='blue')\n# specify residue\nview.add_licorice('ALA, GLU')\n# clear representations\nview.clear_representations()\n# update parameters for ALL cartoons of component 0 (default)\nview.update_cartoon(opacity=0.4, component=0)\n# remove ALL cartoons of component 0 (default)\nview.remove_cartoon(opacity=0.4, component=0)\n# Not using default representation\nview = nv.show_file('your.pdb', default=False)\nview.center()\nview.add_rope()\n</code></pre>"},{"location":"course/lab0x3-nglview/#properties","title":"Properties","text":"<pre><code># set the frame number\nview.frame = 100\n# parameters for the NGL stage object\nview.stage.set_parameters(**{\n# \"percentages, \"dist\" is distance too camera in Angstrom\n\"clipNear\": 0, \"clipFar\": 100, \"clipDist\": 10,\n# percentages, start of fog and where on full effect\n\"fogNear\": 0, \"fogFar\": 100,\n# background color\n\"backgroundColor\": \"black\",\n})\n# note: NGLView accepts both origin camel NGL keywords (e.g. \"clipNear\")\n# and snake keywords (e.g \"clip_near\")\n# parameters to control the `delay` between snapshots\n# change `step` to play forward (positive value) or backward (negative value)\n# note: experimental code\nview.player.parameters = dict(delay=0.04, step=-1)\n# update camera type\nview.camera = 'orthographic'\n# change background color\nview.background = 'black'\n</code></pre>"},{"location":"course/lab0x3-nglview/#viewing-trajectories","title":"Viewing Trajectories","text":"<pre><code># adding new trajectory\nview.add_trajectory(traj)\n# traj could be a `pytraj.Trajectory`, `mdtraj.Trajectory`, `MDAnalysis.Universe`,\n# `parmed.Structure`, `htmd.Molecule` or derived class of `nglview.Trajectory`\n# change representation\nview[0].add_cartoon(...) # equal to view.add_cartoon(component=0)\nview[1].add_licorice(...) # equal to view.add_licorice(component=1)\n</code></pre>"},{"location":"course/lab0x3-nglview/#making-movies","title":"Making Movies","text":"<pre><code>pip install moviepy\nfrom nglview.contrib.movie import MovieMaker\nmovie = MovieMaker(view, output='my.gif', in_memory=True)\nmovie.make()\n</code></pre>"},{"location":"course/lab0x3-nglview/#interactive-controls","title":"Interactive Controls","text":"<ul> <li><code>scroll</code> (or <code>scroll wheel</code>) zoom scene</li> <li><code>scroll-shift</code> move near clipping plane and far fog</li> <li><code>drag-right click</code> pan/translate scene (this works with 3-button mouse, but not track pad on Mac)</li> <li><code>drag-left click</code> rotate scene</li> <li><code>clickPick-left click</code> auto view picked component element</li> <li><code>left click</code> on the desired atom (or its representation) to center view on that atom</li> </ul>"},{"location":"course/lab0x3-nglview/#selection-language","title":"Selection Language","text":"<p>See the Selection Language section of the nglviewer documentation.</p> <p>Visualizing macromolecules and grids in Jupyter Notebooks with nglview</p> <p>Looks like <code>nglview</code> is good for MD trajectories and proteins.</p>"},{"location":"course/lab0x3-nglview/#other-resources","title":"Other Resources","text":"<p>Oxford Computational Biology Tutorials</p> <p>This site has some jupyter notebooks that include installing and using <code>nglview</code>. Also, the notebooks have some useful questions to ask students.</p> <p>Here is an interactive <code>NGLViewer</code> you can embed in a website. It has the ability to convert PyMOL <code>.pse</code> files.</p> <p>MichelaNGLo</p> <p>From Advanced NGLView usage</p> <p>Some useful tips can be found in the posts on Multiple poses in NGLView.</p>"},{"location":"course/lab0x3-nglview/#nmr-files-from-rcsb","title":"NMR files from RCSB","text":"<p>See this issue</p> <pre><code>v = nglview.show_pdbid('1d3z', default_representation=False)\nv.center()\nv.add_cartoon(color='residueindex')\nv\n</code></pre>"},{"location":"course/lab0x3-nglview/#show-model-1","title":"show model 1","text":"<pre><code>view._remote_call('setSelection', target='compList', args=[\"/1\"], \nkwargs=dict(component_index=0))\n</code></pre>"},{"location":"course/lab0x3-nglview/#show-all-models","title":"show all models","text":"<pre><code>view._remote_call('setSelection', target='compList', args=[\"*\"], \nkwargs=dict(component_index=0))\n</code></pre>"},{"location":"course/lab0x3-nglview/#contents-in-practical","title":"Contents in Practical","text":"<ul> <li>First steps: make sure everything works!<ul> <li>Experiment with the interactive controls</li> </ul> </li> <li>Basic API usage:<ul> <li>Show a structure using its PDB identifier</li> <li>Show a structure using a local file</li> <li>Saving the widget state as a screenshot for offline viewing</li> <li>Customize the representations</li> <li>Control representations by selections</li> <li>Load more than one structure</li> <li>Show and hide components</li> </ul> </li> </ul>"},{"location":"course/lab0x3-nglview/#r","title":"R","text":""},{"location":"course/lab0x4-install-openmm/","title":"OpenMM for Molecular Dynamics Simulations","text":""},{"location":"course/lab0x4-install-openmm/#openmm-for-molecular-dynamics-simulations","title":"OpenMM for Molecular Dynamics Simulations","text":""},{"location":"course/lab0x4-install-openmm/#installing-openmm","title":"Installing OpenMM","text":""},{"location":"course/lab0x5-markdown-tutorial/","title":"Lab0x5: Markdown Tutorial","text":""},{"location":"course/lab0x5-markdown-tutorial/#lab0x5-markdown-tutorial","title":"Lab0x5: Markdown Tutorial","text":""},{"location":"course/lab0x5-markdown-tutorial/#work-arounds-for-markdown-in-colab","title":"Work-Arounds for Markdown in Colab","text":""},{"location":"course/lab0x5-markdown-tutorial/#footnotes","title":"Footnotes","text":"<p>From this stack**overflow** post on Footnotes in Markdown: both on Jupyter and Google Colab</p> <pre><code>Example of footnote.&lt;a name=\"cite_ref-1\"&gt;&lt;/a&gt;[&lt;sup&gt;[1]&lt;/sup&gt;](#cite_note-1)\nExample of footnote.&lt;a name=\"cite_ref-2\"&gt;&lt;/a&gt;[&lt;sup&gt;[2]&lt;/sup&gt;](#cite_note-2)\n\n&lt;a name=\"cite_note-1\"&gt;&lt;/a&gt;1. [^](#cite_ref-1) footnote 1\n&lt;a name=\"cite_note-2\"&gt;&lt;/a&gt;2. [^](#cite_ref-2) footnote 2\n</code></pre> <p>I changed the return icon to something more appealing to me:</p> <pre><code>Example of footnote.&lt;a name=\"cite_ref-1\"&gt;&lt;/a&gt;[&lt;sup&gt;[1]&lt;/sup&gt;](#cite_note-1)\n\n&lt;a name=\"cite_note-1\"&gt;&lt;/a&gt;1. [&amp;#8617;](#cite_ref-1) footnote 1\n</code></pre> <p>Which renders to:</p> <p>Example of footnote.[1]</p> <p>1. \u21a9 footnote 1</p>"},{"location":"course/notes-on-course-title/","title":"Notes on course title","text":""},{"location":"course/notes-on-course-title/#notes-on-course-title","title":"Notes on course title","text":"<p>I want to use this for a Quest II course submission. Since there is an AI initiative on campus, there is a need for AI-related courses to facilitate student interest in this topic. Several of the approaches used in this course make use of AI, so I want to include AI in the title.</p> <p>However, I want to be careful that the title does not imply that the course will teach student how to create machine learning models, or teach the theory of AI, but just use the AI/ML models created by others.</p> <p>I can't really use the \"A Practical Approach\" subheading as it is part of a series of books going back decades at Oxford University Press.</p>"},{"location":"course/notes-on-course-title/#draft-titles","title":"draft titles","text":"<ul> <li>AI in Drug Discovery</li> <li>Using AI in Drug Discovery</li> <li>Leveraging AI in Drug Discovery</li> <li>Application of AI in Drug Discovery</li> <li>An AI Approach to Drug Discovery</li> <li>Drug Discovery Using AI</li> </ul> <p>The An AI Approach to Drug Discovery title is the best so far. </p> <p>In this course we will use </p>"},{"location":"course/why-do-md/","title":"Why Do Molecular Dynamics Simulations?","text":""},{"location":"course/why-do-md/#why-do-molecular-dynamics-simulations","title":"Why Do Molecular Dynamics Simulations?","text":"<p>from here</p> <p>deciphering functional mechanisms of proteins and other biomolecules, in uncovering the structural basis for disease, and in the design and optimization of small molecules, peptides, and proteins. ... An atomic-level structure is tremendously helpful and typically generates substantial insight about how the biomolecule functions. These simulations can capture a wide variety of important biomolecular processes, including conformational change, ligand binding, and protein folding, revealing the positions of all the atoms at femtosecond temporal resolution. Importantly, such simulations can also predict how biomolecules will respond--at an atomic level--to perturbations such as mutation, phosphorylation, protonation, or the addition or removal of a ligand.  ... simulations can generate new experimentally testable hypotheses and thus influence further experimental work. </p>"},{"location":"reference/AI-ML-notes/","title":"AI ML Notes","text":""},{"location":"reference/AI-ML-notes/#ai-ml-notes","title":"AI ML Notes","text":""},{"location":"reference/AI-ML-notes/#use-ml-to-identify-protein-protein-interaction-interfaces","title":"Use ML to identify protein-protein interaction interfaces","text":"<p>Mine RCSB for all multimers (including large scale multimers solved by cryo-EM) Identify all interacting surfaces MD sims of monomers to examine variability of surface Use dataset for training a model (save some for tests) test model with knowns test model with unknowns  </p>"},{"location":"reference/AI-ML-notes/#use-ml-to-identify-ppiis","title":"Use ML to identify PPIIs","text":"<p>Identify interacting surface of a known protein-protein interaction MD sims to identify conformers that should not bind Identify potential pockets Dock small molecules to find those that stabilize the non-binding conformer  </p>"},{"location":"reference/AI-ML-notes/#ml-with-macromolecules","title":"ML with macromolecules","text":"<p>PyUUL can parse <code>pdb</code> files and create objects that can be used with common ML algorithms. Also see the PyUUL paper.</p>"},{"location":"reference/AI-ML-notes/#other","title":"other","text":"<p>Use the method outlined in DOI: 10.1002/prot.26345 on multiple frames of a trajectory to find the largest differences between particular cavities. New cavities could be used for docking.</p> <p>See PyUUL for ML</p> <p>The authors show how to optimize GTP in binding pocket.</p> <p>Look for structures of proteins of unknown functions (or others) Run some MD sims See if you can get this ML to identify ATP or GTP binding pockets in new proteins Should be straightforward to test  </p> <p>Or look for allosteric sites Start with NMR structure Do short MD sims using each model as a starting point find frames in the trajectory that are the most different (largest RMSD, RMSF, Rama) identify surface pockets  </p>"},{"location":"reference/AI-ML-notes/#introduction-to-ml-and-dl","title":"Introduction to ML and DL","text":"<p>MIT Introduction to Deep Learning | 6.S191</p> <p>Deep Learning Basics | Colab notebook This has nice summary Mermaid diagrams of the types of machine learning.</p> <p>Google Colab for Machine Learning Projects This includes a nice introduction to Google Colab. There is also a description of what you need to do to save your partially trained model from the random Colab shutdowns--saving checkpoint files to mounted google drive.</p>"},{"location":"reference/alphafold2/","title":"AlphaFold2","text":""},{"location":"reference/alphafold2/#alphafold2","title":"AlphaFold2","text":""},{"location":"reference/alphafold2/#jupyter-notebooks-using-alphafold2","title":"Jupyter Notebooks using AlphaFold2","text":"<p>ColabFold: AlphaFold2 using MMseqs2 AlphaFold2_advanced This notebook has been incorporated into the previous notebook.  </p> <p>Use ColabFold to predict structure of protein from genomics/metagenomics Use ML to identify/predict active site Use ML to identify potential substrates  </p> <p>Targeting allosteric regulation of cancer metabolism cancer cells have metabolic reprogramming, which can be targets. Suggests that ML and MD to identify possible allosteric sites</p> <p>CASP14: what Google DeepMind\u2019s AlphaFold 2 really achieved, and what it means for protein folding, biology and bioinformatics</p>"},{"location":"reference/awk/","title":"AWK","text":""},{"location":"reference/awk/#awk","title":"AWK","text":""},{"location":"reference/awk/#introduction","title":"Introduction","text":"<p>AWK is abbreviated from the names of the original program authors \u2013 Alfred V. Aho, Peter J. Weinberger, and Brian W. Kernighan.</p> <p><code>AWK</code> is often referred to as a command line tool to search and modify text files, but it is actually a programming language that enables the user to write small programs that search for specific text using <code>regex</code>, and perform operations on the matching text. Because it is a scripting language, <code>AWK</code> is powerful and flexible, allowing you to do almost anything to a text file.</p> <p>The definitive guide for using <code>AWK</code> is the GNU AWK User's Guide.</p>"},{"location":"reference/color-by-rmsd/","title":"Coloring by RMSD","text":""},{"location":"reference/color-by-rmsd/#coloring-by-rmsd-in-vmd","title":"Coloring by RMSD in VMD","text":"<p>A nice script to color residues by RMSD</p> <p>From the VMD-L Mailing List</p> <p>Coloring of residues by rmsd</p> <p>This could certainly be done. You would just need to measure the RMSD values for each residue, and then store the results into one of the available per-atom data fields for each atom in the residue (e.g. use a \"same residue as ....\" type atom selection.) Once the data has been stored, you can use the field you've loaded the RMSD values into as the coloring method in VMD. For a time-varying property, like RMSD or RMSF you'll want to use one of the four \"user\"  fields, since they are stored per-atom, for each frame.</p> <p>ngmx -s /Volumes/Files-01/Molec Dynamics/covid-spike-6vxx_1_1_1_traj_dcd/trj_nos.dcd</p> <p>/Volumes/Files-01/Molec Dynamics/charmm-gui-8939678077/gromacs/topol.top</p> <p>ngmx -s topol.tpr -f traj.xtc</p>"},{"location":"reference/conda-colab/","title":"Conda on Colab","text":""},{"location":"reference/conda-colab/#conda-on-colab","title":"Conda on Colab","text":"<p>A quick guide to installing Conda on Google Colab</p> <p>Some packages recommend using <code>conda</code> for installation on Google Colab. Here is a quick guide to doing so.</p> <p>See How to install / use Conda on Google Colab, a guide to installing Conda when using Google Colab.</p> <p>Check to see if conda is already installed:</p> <pre><code>!conda --version\n</code></pre> <p>You may get the error:</p> <p>Error</p> <pre><code>/bin/bash: conda: command not found\n</code></pre> <p>To fix, install conda:</p> <pre><code>!pip install -q condacolab\nimport condacolab\ncondacolab.install()\n</code></pre> <p>Note that the kernel will reboot and you will see this error message:</p> <p>Warning</p> <p>Your session crashed for an unknown reason.</p> <p>It is okay to dismiss this notice.</p> <p>Confirm that installation was successful:</p> <pre><code>!conda --version\n</code></pre> <p>You should get <code>conda 4.9.2</code>, or whatever the current version is.</p> <p>Success</p> <p>Now you can use conda for installation of other packages that are not available by <code>pip</code> or that run better after installation with <code>conda</code>.</p>"},{"location":"reference/diffdock/","title":"DiffDock","text":""},{"location":"reference/diffdock/#diffdock","title":"DiffDock","text":"<p>DiffDock uses deep learning and is a</p> <p>diffusion generative model over the non-Euclidean manifold of ligand poses</p> <p>See the paper on arXiv: DiffDock: Diffusion Steps, Twists, and Turns for Molecular Docking</p>"},{"location":"reference/diffdock/#diffdock-overview","title":"DiffDock overview","text":""},{"location":"reference/docking-tutorials/","title":"Docking Tutorials","text":""},{"location":"reference/docking-tutorials/#docking-tutorials","title":"Docking Tutorials","text":"<ul> <li>Molecular docking for Beginners</li> </ul>"},{"location":"reference/docking-tutorials/#other-docking-resources","title":"Other Docking Resources","text":"<p>Hall DC &amp; Ji HF (2020) A search for medications to treat COVID-19 via in silico molecular docking models of the SARS-CoV-2 spike glycoprotein and 3CL protease. Travel Med Infect Dis 35: 101646. DOI: 10.1016/j.tmaid.2020.101646</p>"},{"location":"reference/docking-tutorials/#vina","title":"Vina","text":"<p>Identifying Protein-Ligand Interactions with Colab</p> <p>This article shows how to install and use Vina in a Google Colab notebook. There is also some mention of using Machine Learning with docking.</p>"},{"location":"reference/docking-tutorials/#smina","title":"SMINA","text":"<p>smina on Sourceforge</p> <p>Ligand docking with Smina</p> <p>Google Colab notebook: Docking with Smina</p>"},{"location":"reference/docking-tutorials/#gnina","title":"GNINA","text":"<p>GNINA is a deep learning framework for docking.</p> <p>A fork of smina that supports using convolutional neural networks to score protein-ligand poses.</p> <p>Molecular Docking with GNINA 1.0</p> <p>gnina workshop Google Colab notebook</p> <p>Colab notebook for installation of GNINA</p> <p>gnina at GitHub</p>"},{"location":"reference/docking-tutorials/#other","title":"Other","text":"<p>Molecular Docking in Google Colab</p>"},{"location":"reference/docking-tutorials/#aiml-approaches","title":"AI/ML Approaches","text":"<p>See GNINA, above.</p> <p>DiffDock</p> <p>DiffDock on GitHub</p> <p>DiffDock Colab Notebook</p> <p>DENVIS: scalable and high-throughput virtual screening using graph neural networks with atomic and surface protein pocket features</p> <p>DENVIS exhibits several orders of magnitude faster screening times (i.e., higher throughput) than both docking-based and hybrid models.</p>"},{"location":"reference/example-articles/","title":"Example Journal Articles","text":""},{"location":"reference/example-articles/#example-journal-articles","title":"Example Journal Articles","text":""},{"location":"reference/example-articles/#md-simulations","title":"MD Simulations","text":"<p>Aier I, Varadwaj PK &amp; Raj U (2016) Structural insights into conformational stability of both wild-type and mutant EZH2 receptor. Sci Rep 6: 34984. DOI: 10.1038/srep34984</p>"},{"location":"reference/example-articles/#docking","title":"Docking","text":"<p>Bruce NJ, Ganotra GK, Richter S &amp; Wade RC (2019) KBbox: A Toolbox of Computational Methods for Studying the Kinetics of Molecular Binding. J Chem Inf Model 59: 3630-3634. DOI: 10.1021/acs.jcim.9b00485. KBbox is a great website with many examples and tutorials.</p> <p>Hall DC &amp; Ji HF (2020) A search for medications to treat COVID-19 via in silico molecular docking models of the SARS-CoV-2 spike glycoprotein and 3CL protease. Travel Med Infect Dis 35: 101646. DOI: 10.1016/j.tmaid.2020.101646</p> <p>Acharya R, Chacko S, Bose P, Lapenna A &amp; Pattanayak SP (2019) Structure Based Multitargeted Molecular Docking Analysis of Selected Furanocoumarins against Breast Cancer. Sci Rep 9: 15743. DOI: 10.1038/s41598-019-52162-0</p>"},{"location":"reference/gnina-tutorial/","title":"GNINA Tutorial","text":"<p>In this tutorial, I will use GNINA for docking a ligand to a receptor, and Google Colab for computational resources.</p> <p>GNINA utilizes an ensemble of convolutional neural networks (CNNs) as a scoring function.</p>"},{"location":"reference/grep/","title":"Using grep","text":"<p>The word <code>grep</code> is derived from a contraction of the command <code>g/re/p</code>, which is short for \"Global search for Regular Expression and Print matching lines\". Currently <code>grep</code> is a command line Unix/Linux utility for searching text files for particular strings of characters. It uses regular expressions, also known as <code>regex</code>, to specify the pattern to match when searching.</p> <p>grep command in Unix/Linux</p> <p>In terminal, type <code>man grep</code> to get the help page for the <code>grep</code> command. To exit the <code>man</code> page, just type <code>q</code>.</p> <p>Usage:</p> <pre><code>grep [options] pattern [files]\n</code></pre> <p>Options: (list some of the common options here)</p>"},{"location":"reference/grep/#basic-syntax","title":"Basic Syntax","text":""},{"location":"reference/grep/#delete-lines-that-match-a-pattern","title":"Delete lines that match a pattern","text":"<p>To delete lines that match a pattern, use the <code>-v</code> option. This option does an inverted match and keeps the lines that do not match the pattern.</p> <pre><code>grep -v \"words to delete\" myfile.txt &gt; tmpfile &amp;&amp; mv tmpfile myfile.txt\n# the words that do not match the pattern are written to tmpfile\n# the &amp;&amp; is used to join multiple commands\n# the contents of tmpfile are then used to overwrite the original file, myfile.txt\n</code></pre>"},{"location":"reference/grep/#other-resources","title":"Other Resources","text":"<p>Here are two of many <code>grep</code> tutorials on the web:</p> <ul> <li>How To Use grep Command In Linux / UNIX With Practical Examples</li> <li>Grep Command in Linux/UNIX</li> </ul>"},{"location":"reference/grep/#notes","title":"Notes","text":"<p>Create a general <code>grep</code> tutorial with an example file (constructed from a random word generator). The file should be long enough that none of the example queries can be accomplished using a text editor.</p> <p>Also create a tutorial using a several files from the RCSB PDB. Use relatively large, multi-chain containing files.</p> <p>These will be relatively easy to grade. The sample <code>grep</code> commands will always produce the same output, and any created files can be compared using <code>diff</code> .</p> <p>The goal is to get the students comfortable using <code>grep</code> (and <code>sed</code>) to examine the RCSB <code>.pdb</code> files and not completely reliant on programs like ChimeraX to prepare proteins for docking and MD simulations.</p>"},{"location":"reference/gromacs-tutorials/","title":"GROMACS Tutorials","text":""},{"location":"reference/gromacs-tutorials/#gromacs-tutorials","title":"GROMACS Tutorials","text":"<p>These are outdated to some degree.</p> <p>Outdated Tutorials</p>"},{"location":"reference/ligpargen/","title":"LigParGen","text":""},{"location":"reference/ligpargen/#ligpargen","title":"LigParGen","text":"<p>OPLS/CM1A Parameter Generator for Organic Ligands</p> <p>See the LigParGen website for details.</p>"},{"location":"reference/ligplot/","title":"LigPlot","text":""},{"location":"reference/ligplot/#ligplot","title":"LigPlot+","text":"<p>A program for making 2D ligand-protein interaction diagrams.</p> <p>See the LigPlot+ v.2.2 website for more information.</p>"},{"location":"reference/optimizing-ligands/","title":"Optimizing Ligands for Docking","text":""},{"location":"reference/optimizing-ligands/#optimizing-ligands-for-docking","title":"Optimizing Ligands for Docking","text":"<p>See ResearchGate</p>"},{"location":"reference/sed/","title":"Using `sed`, the <u>*S*</u>tream <u>*Ed*</u>itor","text":""},{"location":"reference/sed/#using-sed-the-stream-editor","title":"Using <code>sed</code>, the Stream Editor","text":""},{"location":"reference/sed/#introduction","title":"Introduction","text":"<p>Like <code>AWK</code> and <code>grep</code>, <code>sed</code> is a command line utility that can read and process text files. Each of these utilities can use regular expressions (<code>regex</code>) to search through text files to find matching patterns. While searching, <code>sed</code> makes only 1 pass over a text file. This makes it efficient, but <code>sed</code> cannot look backward or forward in the file for pattern matches.</p> <p>For the definitive guide on using <code>sed</code>, see sed, a stream editor.</p>"},{"location":"reference/sed/#basic-syntax","title":"Basic Syntax","text":""},{"location":"reference/sed/#advanced-usage","title":"Advanced Usage","text":"<p>In this section, I'll introduce additional useful syntax for <code>sed</code>. This is not necessarily \"advanced\" syntax, but just more advanced than the basic syntax introduced above.</p>"},{"location":"reference/sed/#tutorial","title":"Tutorial","text":""},{"location":"reference/sed/#assessment","title":"Assessment","text":""},{"location":"reference/unix-tools/","title":"Unix Tools","text":""},{"location":"reference/unix-tools/#unix-tools","title":"Unix Tools","text":""},{"location":"reference/unix-tools/#using-grep","title":"Using <code>grep</code>","text":"<p>Global regular expression print know by its moniker, <code>grep</code>, is a unix tool used for searching plain-text files for lines that contain a pattern and printing the result.</p> <p><code>grep -v</code></p> <p>prints only the lines that don't match the search pattern.</p> <p><code>egrep</code> or <code>grep -E</code> for enhanced <code>grep</code>.</p> <p><code>grep -e</code> (e for expression)</p> <p>prints lines that contain any of the search patterns.</p> <pre><code>grep -e \"pattern1\" -e \"pattern2\" input-file\n</code></pre> <p>This is also useful when your search pattern begins with a <code>-</code>.</p> <pre><code># this does not work\ngrep ---foo\n\n# this works\ngrep -e ---foo\n</code></pre>"},{"location":"reference/useful-references/","title":"Useful References","text":""},{"location":"reference/useful-references/#useful-references","title":"Useful References","text":"<p>Machine Learning in Structural Biology Workshop at the 35th Conference on Neural Information Processing Systems 2021</p> <p>Ron O. Dror, Robert M. Dirks, J.P. Grossman, Huafeng Xu, and David E. Shaw. \"Biomolecular Simulation: A Computational Microscope for Molecular Biology.\" Annual Review of Biophysics, 41:429-452, 2012. https://doi.org/10.1146/annurev-biophys-042910-155245</p> <p>Sobolev OV, Afonine PV, Moriarty NW, Hekkelman ML, Joosten RP, Perrakis A et al. (2020) A Global Ramachandran Score Identifies Protein Structures with Unlikely Stereochemistry. Structure 28: 1249-1258.e2. DOI: 10.1016/j.str.2020.08.005</p>"},{"location":"reference/useful-references/#online-courses","title":"Online Courses","text":"<p>CHEM 181 Introduction to Molecular Simulation This course was last offered in 2020. See course syllabus here Data analysis </p> <p>Molecular Modeling Practical This excellent practical uses an analysis of prion proteins from different sources. This practical is from 2012. See the Analysis Section for examples of typical analyses done with GROMACS.  </p> <p>PDBe Teaching Materials </p> <p>Good introductory questions for PDB files can be found at the Biomolecular Structures and Models (Pre-test) site and the Biomolecular Structures and Models (Post-test) site.  </p> <p>PHY542: MD analysis with VMD tutorial</p> <p>Running Molecular Dynamics with Amber on Compute Canada</p> <p>T019 \u00b7 Molecular dynamics simulation Here the authors use OpenMM to simulate a protein-ligand complex. Also a nice introduction to the theory behind molecular dynamics simulations. There are some nice quiz questions and short activities here, too.</p> <p>Molecular Dynamics simulations in Python and Lecture 7: Molecular Dynamics Simulations in Python both have a nice introduction to the theory behind the simulations. I may not go into this much detail as my current math skills are not up to it.</p> <p>QM/MM with GROMACS + CP2K One in a series of courses using the Archer2 computing resources in the UK. Learning Outcomes, prerequisites, and requirements are listed. This is a self-service course that is always open.</p> <p>Also see QM/MM simulation with GROMACS + CP2K</p>"},{"location":"reference/useful-references/#tutorials","title":"Tutorials","text":"<p>Here is a Jupyter Notebook in Colab Tutorial: a simple simulation of alanine dipeptide with ANI-2x using OpenMM-Torch and NNPOps</p>"},{"location":"reference/useful-references/#websites","title":"Websites","text":"<p>MolProbity </p> <p>To calculate Ramachandran Z-scores: Tortoize </p> <p>Note</p> <p>To analyze the Z-scores of each frame of a trajectory, you need to download and run Tortoize locally. </p> <p>Tortoize GitHub repository libcif++ libzeep</p> <p>Running a Simulation in Amber This page shows an excellent flowchart and outline of the steps necessary for preparing the protein structure for simulation using AMBER. It also has a series of exercises that are useful for teaching.</p> <p>CP2K Open Source Molecular Dynamics </p> <p>CP2K is a quantum chemistry and solid state physics software package that can perform atomistic simulations of solid state, liquid, molecular, periodic, material, crystal, and biological systems.</p> <p>Computational Biology Services - Tutorials</p> <p>OpenMM User Guide</p>"},{"location":"reference/useful-references/#acemd","title":"ACEMD","text":"<p>ACEMD: Molecular Dynamics Made Simple and the accompanying PlayMolecule and HTMD.</p>"},{"location":"reference/useful-references/#plumed","title":"PLUMED","text":"<p>Master ISDD tutorial 2020: Brief introduction to PLUMED</p> <p>It can be used to analyze features of the dynamics on-the-fly or to perform a wide variety of free energy methods.</p>"},{"location":"reference/useful-references/#nnpops","title":"NNPOps","text":"<p>NNPOps</p> <p>Part of OpenMM</p> <p>The goal of this project is to promote the use of neural network potentials (NNPs) by providing highly optimized, open source implementations of bottleneck operations that appear in popular potentials. ... This code is designed for inference (running simulations)</p> <p>Jupyter Notebook tutorial:</p> <p>Tutorial: a simple simulation of alanine dipeptide with ANI-2x using OpenMM-Torch and NNPOps</p>"},{"location":"reference/useful-references/#training-your-own-models","title":"Training your own models","text":"<p>Welcome to TorchANI\u2019s documentation!</p>"},{"location":"reference/useful-references/#integrating-jupyter-notebooks-and-canvas","title":"Integrating Jupyter Notebooks and Canvas","text":"<p>Illumidesk</p>"},{"location":"reference/useful-references/#protein-structure-analysis","title":"Protein structure analysis","text":"<p>Structure validation practical - answers</p> <p>PDBe Tutorials </p>"},{"location":"reference/useful-references/#readings","title":"Readings","text":"<p>Hollingsworth SA &amp; Dror RO (2018) Molecular Dynamics Simulation for All. Neuron 99: 1129-1143. DOI: 10.1016/j.neuron.2018.08.011</p> <p>Chen YC (2015) Beware of docking. Trends Pharmacol Sci 36: 78-95. DOI: 10.1016/j.tips.2014.12.001</p> <p>Gapsys V &amp; de Groot BL (2020) On the importance of statistics in molecular simulations for thermodynamics, kinetics and simulation box size. Elife 9: e57589. DOI: 10.7554/eLife.57589</p> <p>Knapp B, Ospina L &amp; Deane CM (2018) Avoiding False Positive Conclusions in Molecular Simulation: The Importance of Replicas. J Chem Theory Comput 14: 6127-6138. DOI: 10.1021/acs.jctc.8b00391</p> <p>How to (not) perform a Molecular Dynamics simulation study A good article showing why you should not base conclusions on single MD simulations.</p> <p>Bruzzese A, Dalton JAR &amp; Giraldo J (2020) Statistics for the analysis of molecular dynamics simulations: providing P values for agonist-dependent GPCR activation. Sci Rep 10: 19942. DOI: 10.1038/s41598-020-77072-4</p> <p>Yu H &amp; Dalby PA (2020) A beginner\u2019s guide to molecular dynamics simulations and the identification of cross-correlation networks for enzyme engineering. Methods Enzymol 643: 15-49. DOI: 10.1016/bs.mie.2020.04.020. This article includes a GROMACS tutorial.</p> <p>Hildebrand PW, Rose AS &amp; Tiemann JKS (2019) Bringing Molecular Dynamics Simulation Data into View. Trends Biochem Sci 44: 902-913. DOI: 10.1016/j.tibs.2019.06.004</p> <p>Tekpinar M, Neron B &amp; Delarue M (2021) Extracting Dynamical Correlations and Identifying Key Residues for Allosteric Communication in Proteins by correlationplus. J Chem Inf Model 61: 4832-4838. DOI: 10.1021/acs.jcim.1c00742 This is a useful python package to carry out and visualize pairwise correlations in molecular dynamics trajectories.</p> <p>Sheik Amamuddy O, Veldman W, Manyumwa C, Khairallah A, Agajanian S, Oluyemi O et al. (2020) Integrated Computational Approaches and Tools for Allosteric Drug Discovery. Int J Mol Sci 21: E847. DOI: 10.3390/ijms21030847</p> <p>Metehan Ilter, Ramazan Kasmer, Farzaneh Jalalypour, Canan Atilgan, Ozan Topcu, Nihal Karakas, Ozge Sensoy (2022) Inhibition of mutant RAS-RAF interaction by mimicking structural and dynamic properties of phosphorylated RAS eLife 11:e79747 DOI: 10.7554/eLife.79747. This may be a good required reading for the course.</p> <p>Sunseri J &amp; Koes DR (2021) Virtual Screening with Gnina 1.0. Molecules 26: 7369. DOI: 10.3390/molecules26237369</p>"},{"location":"reference/useful-references/#test-mermaid-diagram","title":"Test Mermaid Diagram","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>This flowchart was adapted from Information flow in AMBER</p> <pre><code>graph TD\n    A(PDB files)  --&gt;|atom coordinates| B{tLEaP};\n    C(\"Force Field (ff) files\") --&gt;|ff parameters| B{tLEaP};\n    D(LEaP commands) --&gt;|build system| B{tLEaP};</code></pre>"},{"location":"reference/using-vmd/","title":"Using VMD","text":""},{"location":"reference/using-vmd/#using-vmd","title":"Using VMD","text":"<p>Download the tutorial files from the VMD tutorials website.</p>"},{"location":"reference/using-vmd/#common-text-commands","title":"Common text commands","text":"<p>See the VMD Text Command Summary</p> <ul> <li><code>logfile console</code> to log GUI commands to the <code>tcl</code> console</li> <li><code>exit</code>: Quit VMD.</li> <li><code>mol</code>: Load, modify, or delete a molecule in VMD.</li> <li><code>logfile</code><code>filename</code>, to log the GUI commands to a file that can be run as a script.</li> <li><code>mol addrep 0</code> # adds a representation of molecule 0</li> <li><code>mol showrep 0 0 off</code> # turn off molecule 0 (top)</li> <li><code>logfile off</code>, to turn off logging.</li> <li><code>logfile console</code>, to log the commands to the console when you want to view a GUI command.</li> <li><code>display resetview</code>, to reset the view (duh).</li> <li><code>mol modstyle 0 1 VDW 1.000000 12.000000</code></li> <li><code>mol modstyle 0 1 VDW 0.500000 13.000000</code>, here 0.5 is the sphere scale, and 13 is the sphere resolution.</li> <li><code>mol modstyle 0 1 Tube 0.300000 12.000000</code>, here 0.3 is the tube Radius and 12 is the resolution.</li> <li><code>mol modstyle 0 1 NewCartoon 0.300000 10.000000 4.100000 0</code>, </li> <li><code>mol modcolor 0 1 ResType</code>, to change coloring to residue type (polar, charged, etc.)</li> <li><code>mol modselect 0 1 helix</code>, to select just the helices</li> <li><code>mol modselect 0 1 (not helix) and (not betasheet)</code>, to select just the loops</li> <li><code>mol modselect 0 1 (resname LYS) or (resname GLY)</code>,</li> <li><code>mol modselect 0 1 water</code>,</li> <li><code>mol modselect 0 1 water and within 3 of protein</code>, selects all the water molecules that are within a distance of 3 angstroms of the protein</li> <li><code>axes location off</code>, turn off the axes in the viewer. See axes for options.</li> <li><code>mol modcolor rep_number molecule_number color_method</code></li> <li><code>mol modselect rep_number molecule_number select_method</code></li> <li><code>mol showrep molecule_number rep_number [on | off]</code></li> <li><code>modstyle rep_number molecule_number rep_style:</code></li> </ul>"},{"location":"reference/using-vmd/#color","title":"Color","text":"<p>From the VMD Coloring Methods web page:</p> <p>There are 1041 colors available in VMD, with color ids ranging from 0 to 1040. The first 17 are, in order:</p> Color Color ID Favorite blue 0 red 1 gray 2 orange 3 yellow 4 tan 5 silver 6 green 7 white 8 pink 9 cyan 10 purple 11 lime 12 mauve 13 ochre 14 iceblue 15 black 16 yellow2 17 yellow3 18 green2 19 green3 20 cyan2 21 cyan3 22 blue2 23 blue3 24 violet 25 26violet2 26 magenta 27 29magenta2 28 red2 29 red3 30 orange2 31 orange 3 32"},{"location":"reference/using-vmd/#creating-a-selection-macro","title":"Creating a Selection Macro","text":"<p>This macro will select all the lipids in a trajectory that has a membrane.</p> <pre><code>atomselect macro lipid {\nresname DLPC or resname LPPC or resname DLPE or resname DLPS or resname DLPA or resname DLPG or resname DMPC or resname DMPE or resname DMPS or resname DMPA or resname DMPG or resname DPPC or resname DPPE or resname DPPS or resname DPPA or resname DPPG or resname DSPC or resname DSPE or resname DSPS or resname DSPA or resname DSPG or resname DOPC or resname DOPE or resname DOPS or resname DOPA or resname DOPG or resname POPC or resname POPE or resname POPS or resname POPA or resname POPG or resname SAPC or resname SDPC or resname SOPC or resname DAPC\n}\n</code></pre>"},{"location":"reference/using-vmd/#using-the-atomselect-command","title":"Using the <code>atomselect</code> Command","text":"<p>From Using the <code>atomselect</code> command</p> <ol> <li>Create a selection given the selection text, molecule id, and optional frame number. The <code>atomselect</code> command creates an object, and returns the name of the new atom selection.  </li> <li>Then use the created selection to access the information about the atoms in the selections.</li> </ol>"},{"location":"reference/using-vmd/#creating-multiple-representations","title":"Creating multiple representations","text":"<pre><code>modstyle rep_number molecule_number rep_method: # use top for molecule number\n</code></pre> <pre><code>mol modstyle 0 1 NewCartoon 0.300000 10.000000 4.100000 0 # drawing style is new cartoon\nmol modselect 0 1 protein # selected atoms are protein\nmol modcolor 0 1 Structure # colors by secondary structure\n</code></pre> <pre><code>mol addrep 1\\\nmol color ResName\\\nmol representation VDW 1.000000 12.000000\\\nmol selection resname LYS\\\nmol material Opaque\n</code></pre> <pre><code>mol addrep 0\nmol modstyle 4 0 QuickSurf 1.000000 0.500000 1.000000 1.000000\nmol modmaterial 4 0 Transparent\nmol modcolor 4 0 Molecule\nmol color Molecule\nmol representation QuickSurf 1.000000 0.500000 1.000000 1.000000\nmol selection protein\nmol material Transparent\nmol modrep 4 0\n</code></pre> <pre><code>delete molecule_number\n</code></pre> <p>Be sure that the molecule to load is in the current directory.</p> <pre><code>source filename.tcl\n</code></pre> <pre><code>mol new 1ubq.pdb\nmol modstyle 0 1 NewCartoon 0.300000 10.000000 4.100000 0\n</code></pre> <p><code>set</code> <code>variable</code> <code>value</code> <code>$variable</code> refers to the value of <code>variable</code>. Use the shortcut <code>top</code> to refer to the top molecule instead of a molecule ID.</p>"},{"location":"reference/using-vmd/#selecting-lipids","title":"Selecting Lipids","text":"<p>Download and install the membplugin</p> <pre><code>resname POPC and name \"C[23].*\" and not name \"C[123]\"\n</code></pre> <p>From this site</p> <pre><code>name N \"C1[1-5]\" \"H1[1-5].\" P \"O1[1-4]\" # Headgroup only\nname \"C[1-3]\" \"H.\" \"C[2-3]1\" \"O[2-3][1-2]\" # glycerol + carbonyl\nname \"H.*[R-Z]\" \"C[2-3][2-9]\" \"C[2-3]1.\" # Acyl chain\n</code></pre> <p>Although in Tcl scripts, the braces and double quotes need to be escaped so that the interpreter doesn't think they are a command. Ex:</p> <pre><code>set sel [atomselect top \"name \\\"H.*\\[R-Z\\]\\\" \\\"C\\[2-3\\]\\[2-9\\]\\\" \\\"C\\[2-3\\]1.\\\"\"]\n</code></pre> <p>The <code>atomselect</code> command creates an object. </p>"},{"location":"reference/using-vmd/#setting-up-vmd","title":"Setting up VMD","text":""},{"location":"reference/using-vmd/#the-vmdrc-file","title":"the <code>.vmdrc</code> file","text":"<p>type <code>menu list</code> in the Terminal window to get the list of names for the various menus. The <code>tkcon menu on</code> trick I got from the [VMD mailing list](the <code>tkcon</code> menu trick I got from here</p> <pre><code># position and turn on menus\nmenu main on\nafter idle {\nafter 2 {\nmenu tkcon on\n  }\n}\n# change directory\ncd ~/vmd-work\n</code></pre>"},{"location":"reference/using-vmd/#top-molecule","title":"Top molecule","text":"<p>By default the last molecule loaded in the VMD is the top molecule. There can be only one top molecule at a time. The top molecule is indicated by a T flag in the VMD Main window. The top molecule is the default molecule for mol commands when nothing is specified.</p>"},{"location":"reference/using-vmd/#change-background-color","title":"Change Background Color","text":"<pre><code>color Display Background white\n</code></pre>"},{"location":"reference/using-vmd/#color_1","title":"Color","text":"<p><code>change rgb color</code><code>r g b</code>: Set rgb of color to r g b.</p> <p>rgb values have to be decimals.</p> <p>From Pymol (divide by 255):</p> <pre><code>set_color blueC= [20, 108, 150] # 0.078431 0.423529 0.588235\nset_color blueN= [4, 64, 93] #    0.015686 0.25098 0.364706\nset_color blueO= [10, 83, 118] #  0.039216 0.32549 0.462745\nset_color blueH= [83, 147, 178] # 0.28819 0.57647 0.69804\nset_color blueS= [50, 122, 156] # 0.1961 0.47843 0.611765\n</code></pre> <p>From the vmd wiki</p> <ul> <li>See the vmd users manual to use a script to assign specific RGB colors to specific color scale values.</li> <li>Set the color scale data range to 0 to 1023.</li> <li>Then whatever beta/user value you assign to an atom will correspond directly to the color you want.</li> <li>Now you have 1024 colors you can assign any way you like.</li> </ul> <p>Script</p> <pre><code>proc setcolorscaleindex { index r g b } {\nset colorindex [expr [colorinfo num] + $index]\ncolor change rgb $colorindex $r $g $b\n}\nsetcolorscaleindex 0 1 1 1\nsetcolorscaleindex 1 1 0 0\nsetcolorscaleindex 2 0 1 0\nsetcolorscaleindex 3 0 0 1\nsetcolorscaleindex 4 0 1 1\nsetcolorscaleindex 5 1 0 1\nsetcolorscaleindex 6 1 1 0\nset sel [atomselect top all]\n$sel set beta 0.0 # this sets the beta value for all atoms to 0\n$sel delete # delete the selection \"sel\"\nset sel [atomselect top \"name CA\"] # create a new selection, \"sel\", that contains the alpha carbons\n$sel set beta 1.0 # set the beta value for the alpha carbons to 1.0\n$sel delete # delete the selection\nmol modcolor 0 0 Beta # use the beta coloring scheme to color the molecule\n## note that the 'mol scaleminmax' command has to be last...\nmol scaleminmax 0 0 0 1023\n</code></pre> <pre><code>color change rgb $colorindex $r $g $b\ncolor change rgb 40 0.078431 0.423529 0.588235\ncolor change rgb 41 0.015686 0.25098 0.364706\ncolor change rgb 42 0.039216 0.32549 0.462745\ncolor change rgb 43 0.28819 0.57647 0.69804\ncolor change rgb 44 0.28819 0.57647 0.69804\ncolor change rgb 45 0.1961 0.47843 0.611765\n</code></pre> <pre><code>$sel set beta 40\nmol modstyle 0 0 vdw\n</code></pre> <pre><code>set sel [atomselect top \"hydrophobic\"] # This creates a selection containing all the hydrophobic residues.\n$sel set beta 1 # label all hydrophobic atoms by setting their beta values to 1.\n</code></pre> <p>Paletton.com</p>"},{"location":"reference/using-vmd/#materials","title":"Materials","text":"<p>See the VMD Materials wiki page.</p>"},{"location":"reference/using-vmd/#modifying-a-selection","title":"Modifying a Selection","text":"<pre><code>cd 1-tutorials\nmol new 1ubq.pdb # loaded as molecule 0\n</code></pre> <pre><code>setcolorscaleindex 40 0.078431 0.423529 0.588235\nsetcolorscaleindex 41 0.015686 0.25098 0.364706\nsetcolorscaleindex 42 0.039216 0.32549 0.462745\nsetcolorscaleindex 43 0.28819 0.57647 0.69804\nsetcolorscaleindex 44 0.28819 0.57647 0.69804\nsetcolorscaleindex 45 0.1961 0.47843 0.611765\n</code></pre> <p>another attempt at beta coloring</p> <pre><code>set crystal [atomselect top \"all\"]\n$crystal set beta 0\nset sel [atomselect top \"hydrophobic\"]\n$sel set beta 1\n$crystal set radius 1.0\n$sel set radius 1.5 \n</code></pre> <p>Changing the color scale definitions</p> <pre><code>proc tricolor_scale {} {\nset color_start [colorinfo num]\ndisplay update off\nfor {set i 0} {$i &lt; 1024} {incr i} {\nif {$i == 0} {\nset r 1;  set g 0;  set b 0\n}\nif {$i == 511} {\nset r 1;  set g 1;  set b 1\n}\nif {$i == 513} {\nset r 0;  set g 0;  set b 1\n}\ncolor change rgb [expr $i + $color_start     ] $r $g $b\n}\ndisplay update on\n}\ntricolor_scale\n</code></pre> <p>Once the beta values for atoms have been changed, they stay changed. You can then assign a color to a beta value, and then choose the coloring method \"beta\" to assign the color to a beta value. </p> <p>This worked:</p> <pre><code>proc setcolorscaleindex { index r g b } {\nset colorindex [expr [colorinfo num] + $index]\ncolor change rgb $colorindex $r $g $b\n}\n&gt;Main&lt; (1-tutorials) 90 % \n&gt;Main&lt; (1-tutorials) 90 % setcolorscaleindex 0 1 1 1\n&gt;Main&lt; (1-tutorials) 91 % setcolorscaleindex 1 1 0 0\n&gt;Main&lt; (1-tutorials) 92 % setcolorscaleindex 2 0 1 0\n&gt;Main&lt; (1-tutorials) 93 % setcolorscaleindex 3 0 0 1\n&gt;Main&lt; (1-tutorials) 94 % setcolorscaleindex 4 0 1 1\n&gt;Main&lt; (1-tutorials) 95 % setcolorscaleindex 5 1 0 1\n&gt;Main&lt; (1-tutorials) 96 % setcolorscaleindex 6 1 1 0\n&gt;Main&lt; (1-tutorials) 97 % set sel [atomselect top all]\natomselect6\n&gt;Main&lt; (1-tutorials) 98 % $sel set beta 4\n&gt;Main&lt; (1-tutorials) 99 % $sel set beta 0.0\n&gt;Main&lt; (1-tutorials) 100 % $sel set beta 3\n&gt;Main&lt; (1-tutorials) 101 % $sel set beta 2\n&gt;Main&lt; (1-tutorials) 102 % $sel set beta 6\n&gt;Main&lt; (1-tutorials) 103 % mol modcolor 0 0 Beta\n&gt;Main&lt; (1-tutorials) 104 % mol scaleminmax 0 0 0 1023\n&gt;Main&lt; (1-tutorials) 105 % mol scaleminmax 0 0 0 1023\n&gt;Main&lt; (1-tutorials) 106 % $sel set beta 4\n&gt;Main&lt; (1-tutorials) 107 % $sel set beta 3\n&gt;Main&lt; (1-tutorials) 108 % $sel set beta 2\n&gt;Main&lt; (1-tutorials) 109 % $sel set beta 1\n&gt;Main&lt; (1-tutorials) 110 % $sel set beta 5\n&gt;Main&lt; (1-tutorials) 111 % $sel set beta 6\n&gt;Main&lt; (1-tutorials) 112 % setcolorscaleindex 0 0.078431 0.423529 0.588235\n&gt;Main&lt; (1-tutorials) 113 % setcolorscaleindex 6 0.1961 0.47843 0.611765\n&gt;Main&lt; (1-tutorials) 114 % mol scaleminmax 0 0 0 1023\n&gt;Main&lt; (1-tutorials) 115 % $sel set beta 0\n&gt;Main&lt; (1-tutorials) 116 % $sel set beta 1\n&gt;Main&lt; (1-tutorials) 117 % setcolorscaleindex 43 0.28819 0.57647 0.69804\n&gt;Main&lt; (1-tutorials) 118 % mol scaleminmax 0 0 0 1023\n&gt;Main&lt; (1-tutorials) 119 % $sel set beta 43\n&gt;Main&lt; (1-tutorials) 120 % $sel set beta 42\n&gt;Main&lt; (1-tutorials) 121 % \n</code></pre> <p>Remember to use <code>logfile &lt;filename&gt;</code> to log commands to a file that you can turn into a script. </p>"},{"location":"reference/using-vmd/#vmd-and-namd-tutorials","title":"VMD and NAMD tutorials","text":"<p>quickMD tutorial Tutorial: A quick MD simulation using NAMD and VMD HPRC Short Course: Classical Molecular Dynamics with NAMD </p>"},{"location":"reference/using-vmd/#scripting-in-vmd","title":"Scripting in VMD","text":"<p>This was taken from the Scripting in VMD web page.</p>"},{"location":"reference/using-vmd/#quick-tutorial","title":"Quick tutorial","text":"<ul> <li>Start a VMD session.</li> <li>Select Extensions \u2192 Tk Console.</li> <li>Download <code>1ubq.pdb</code> and move it to the <code>vmd-work</code> directory.</li> <li>Change to the <code>vmd-work</code> directory using the console.</li> <li>Type <code>mol new 1ubq.pdb</code> and click enter.</li> <li>Type <code>set crystal [atomselect top \"all\"]</code> in the TkConsole window.</li> </ul> <p>This creates a <code>crystal</code> selection that we can do stuff with.</p> <ul> <li>Type <code>$crystal num</code> in the Tk Console window.</li> </ul>"},{"location":"reference/using-vmd/#movie-making","title":"Movie making","text":"<p>Purpose: to make a video illustration of a MD simulation of the Covid-19 spike protein in a membrane that I can use for teaching. This is also a nice exercise for learning VMD.</p> <p>Here is a nice short tutorial on Movie Making from molecular dynamics simulation with VMD, most importantly, use the trajectory smoothing function.</p> <p></p> <p>There is a nice VMD function for Tracking Script Command Versions of the GUI Actions. </p> <p>I can go through a bunch of tutorials and then use the script commands.</p> <p>visualizing glycans in protein structures</p>"},{"location":"reference/using-vmd/#random-notes","title":"Random Notes","text":"<p>I found a Covid-19 spike protein trajectory on the CHARMM-GUI website.</p> <p>ambient occlusion lighting with tachyon</p> <p>Need to learn:</p> <ul> <li>how to select the different parts of the molecules</li> <li>how to make a movie from the trajectory</li> </ul> <p>A good place to start is the VMD User's Guide.</p>"},{"location":"reference/using-vmd/#saving-an-image","title":"Saving an Image","text":""},{"location":"reference/working-with-pdb-files/","title":"PDB Files","text":""},{"location":"reference/working-with-pdb-files/#more-pdb-file-manipulation","title":"More <code>.pdb</code> file manipulation","text":"<p>Some <code>pdb</code> files from the RCSB database contain more than one model. Structures solved by NMR often have multiple structure models--20 is common. To extract a single model for docking or MD simulations, you can always open the file in PyMOL or VMD and save a single model as a new file. But we can also do this easily using <code>grep</code>, <code>awk</code>, or <code>sed</code>. Here we will use the stream editor, <code>sed</code>, because <code>grep</code> is designed for use on lines of text and we want to collect a block of text.</p> <p>Info</p> <p>It is possible to extract blocks of text using <code>grep</code> but it is not as easy as using <code>sed</code>.</p> <p>Below we will extract a single model from a multi-model structure file.</p> <p><code>1qLz</code> is a typical multi-model structure file that has 20 structures in the same file. Multi-model files have the following format.</p> <pre><code>MODEL        1                                                                  \nATOM      1  N   LEU A 125       4.329 -12.012   2.376  1.00  0.00           N  \nATOM      2  CA  LEU A 125       5.029 -10.769   2.674  1.00  0.00           C  \n...\nENDMDL                                                                          \nMODEL        2                                                                  \nATOM      1  N   LEU A 125       5.962 -12.281  -0.586  1.00  0.00           N  \nATOM      2  CA  LEU A 125       6.228 -10.948  -0.052  1.00  0.00           C  \n...\n</code></pre> <p>Note</p> <p>Each model is preceded by a line that designates the model number (<code>MODEL 1</code>, <code>MODEL 2</code>, and so on) and ends with the line <code>ENDMDL</code>. We can use these as starting and stopping patterns for each model that we want to extract from this file.</p> <p>Regex, which is short for Regular Expressions1 is used for search and replace of characters in certain text files (but generally should not be used for <code>html</code> files--see Stackoverflow). In our case we want to extract the text between the patterns <code>MODEL 1</code> and <code>ENDMDL</code> (including the patterns) into a new file. I got the code, below, from Stackoverflow, but had to modify it for using <code>sed</code> on Mac OSX (you need the <code>-E</code> option).</p> <pre><code># Here is the sed command\nsed -E -n '/^MODEL +1 /,/^ENDMDL/w 1qLz-model1.pdb' 1qlz.pdb\n</code></pre> <p>Info</p> <p><code>sed -E</code> use extended regular expressions <code>-n</code> do not echo every line to output <code>'/START/,/STOP/'</code> pattern to search for; we start at lines that begin with <code>MODEL 1</code> and end with lines that begin with <code>ENDMDL</code> <code>^</code> is Regex for the beginning of a line <code>&lt;space&gt; +</code> search for 1 or more spaces <code>1 &lt;space&gt;</code>, search for the number 1 followed by a space (or else you get model 19) <code>w 1qLz-model1.pdb</code> write the output to the file <code>1qLz-model1.pdb</code> <code>1qlz.pdb</code> is the input file</p> <p>Check that your protein is indeed the human prion protein. It is easy to mistake <code>1qlz</code> for <code>1q1z</code>. That is why it is best to use lowercase letters for the structure file names (except for the letter, L, where we use upper case), because then the letter, <code>o</code>, will not be mistaken for the number <code>0</code>.</p> <ol> <li> <p>The Python Regex Cheat Sheet has a list of many common regular expressions and is a useful reference.\u00a0\u21a9</p> </li> </ol>"},{"location":"user-guide/building-this-site/","title":"Building This Site","text":"<pre><code>pip install mkdocs-material\n\ncd ~/Sites\nmkdir md-sims\ncd md-sims\nmkdocs new .\n</code></pre> <p>Add to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nname: material\n</code></pre>"},{"location":"user-guide/building-this-site/#publishing-the-site","title":"Publishing the Site","text":"<p>From Publishing your site</p> <p>Create <code>.github/workflows/ci.yml</code></p> <pre><code>name: ci on:\npush:\nbranches:\n- master - main\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\n- uses: actions/setup-python@v2\nwith:\npython-version: 3.x\n- run: pip install mkdocs-material - run: mkdocs gh-deploy --force\n</code></pre> <pre><code>git init\ngit status\ngit add .\ngit commit -m \"initial commit\"\n</code></pre> <p>Create a new repository on GitHub. Then do the following:</p> <pre><code>git remote add origin https://github.com/dgoppenheimer/md-sims.git\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>Go to <code>https://github.com/dgoppenheimer/md-sims/settings/pages</code></p> <p>Choose <code>gh-pages</code> branch and click <code>Save</code>.</p> <p>Add some text to <code>index.md</code></p> <p>Save, commit and <code>git push</code></p> <p>go to <code>https://github.com/dgoppenheimer/md-sims/actions</code> and watch the site being built.</p> <p>Check the site at <code>https://dgoppenheimer.github.io/md-sims/</code></p> <p>Add to mkdocs.yml</p> <pre><code>markdown_extensions:\n- admonition\n- pymdownx.details\n- pymdownx.superfences\n</code></pre> <p>Success</p> <p>Create a directory and a file</p> <pre><code>cd docs\nmkdir user-guide\n</code></pre> <p>Success</p> <pre><code>touch .gitignore\necho \".DS_Store\" &gt;&gt; .gitignore\necho \".gitignore\" &gt;&gt; .gitignore\n</code></pre> <p>Change site name in <code>mkdocs.yml</code></p> <p>Failure</p> <p>The deployment of the site to the <code>gh-pages</code> branch using gh-actions stopped working after a while. I had never pulled that branch to my local repository, and the build on GitHub pages completed, but showed the following warning.  </p><pre><code>WARNING  -  Version check skipped: No version specified in previous deployment.\n</code></pre> After trying to get it working (and failing) I decided to switch to manual deployment using <code>mkdocs gh-deploy --force</code>."},{"location":"user-guide/building-this-site/#manual-deployment-of-site","title":"Manual Deployment of Site","text":"<ul> <li>Remove the <code>ci.yml</code> file from <code>.github/workflows/</code> directory.</li> <li>Delete the <code>gh-pages</code> branch on GitHub.</li> </ul> <pre><code>git push origin --delete gh-pages\n</code></pre> <ul> <li>Create a new <code>gh-pages</code> branch.</li> </ul> <pre><code>git checkout gh-pages\ngit push -u origin gh-pages\ngit checkout main\nSwitched to branch 'main'\nYour branch is up to date with 'origin/main'.\n</code></pre> <ul> <li>Deploy the site.</li> </ul> <pre><code>mkdocs gh-deploy --force\n</code></pre> <ul> <li>Add the <code>site/</code> directory to <code>.gitignore</code>.</li> <li>Check the site at https://dgoppenheimer.github.io/md-sims/.</li> </ul> <p>Success</p>"},{"location":"user-guide/building-this-site/#update","title":"Update","text":"<p>I thought I would try the automatic deployment one more time.</p> <p>I followed the instructions in the Material for MkDocs documentation on Publishing your site using the following <code>.github/workflows/ci.yml</code> file:</p> <pre><code>name: ci on:\npush:\nbranches:\n- main\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\n- uses: actions/setup-python@v2\nwith:\npython-version: 3.x\n- run: pip install mkdocs-material - run: pip install mkdocs-video\n- run: pip install markdown_captions\n- run: mkdocs gh-deploy --force\n</code></pre> <p>Success</p> <p>Deployment of the site on GitHub works when I push changes to the repository.</p>"},{"location":"user-guide/building-this-site/#updating-github-actions","title":"Updating GitHub Actions","text":"<p>According to the GitHub Blog, all GitHub Actions will begin running on Node16 instead of Node12. I need to update my Actions to continue automatic deployment.</p> <p>Update the <code>.github/workflows/ci.yml</code> file:</p> <pre><code>name: ci on:\npush:\nbranches:\n- main\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n- uses: actions/setup-python@v4\nwith:\npython-version: 3.x\n- run: pip install \\\nmkdocs-material \\\nmkdocs-video \\\nmkdocs-callouts \\\nmarkdown_captions\n- run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"user-guide/building-this-site/#customizing-the-site","title":"Customizing the Site","text":""},{"location":"user-guide/building-this-site/#add-an-extracss-file","title":"Add an <code>extra.css</code> file","text":"<p>See How do I specify custom primary color for mkdocs-material? And Changing the colors And Customization</p>"},{"location":"user-guide/building-this-site/#create-a-landing-page","title":"Create a Landing Page","text":"<p>How to add a landing page to a mkdocs doc site using mkdocs-material?</p> <p>Create an <code>overrides</code> directory</p> <p>Reference this in <code>mkdocs.yml</code></p> <pre><code>theme:\ncustom_dir: overrides\n</code></pre> <p>Since the custom directory is declared, you need to change</p> <pre><code>{% extends \"overrides/main.html\" %}\n</code></pre> <p>to</p> <pre><code>{% extends \"main.html\" %}\n</code></pre> <p>in <code>main-styles.html</code> and <code>main.html</code></p> <p>okay, I got most of the home page stuff shown on Binbash Leverage\u2122 Documentation</p> <p>Now I need to customize it.</p> <p>Start with the footer.</p> <p>Compare it to the Material footer.</p> <p>Try and replace the bin bash items with the material items.</p> <p>need <code>overrides/assets/stylesheets</code> directory  add the css files</p> <p>The image is a bit too far to the right search the css file in the overrides directory   change .mdx-hero__image{order:1;transform:translateX(1rem);</p> <p>from 4rem to 1rem to move the image to the left a bit</p> <p>In the <code>home.html</code> file there is reference to <code>config.site_description</code> that has some text in it. The precedes the text: <code>Set up in 5 minutes</code>. It is not clear why the <code>Set up in 5 minutes</code> text was not added to <code>config.site_description</code>, or why the text in <code>config.site_description</code> was not added to <code>home.html</code>. Now there are two files to change for the same block of text. </p> <p>The <code>config.site_description</code> refers to the <code>mkdocs.yml</code> file:</p> <pre><code>site_description: &gt;-\nCreate a branded static site from a set of Markdown files to host the\ndocumentation of your Open Source or commercial project\n</code></pre> <p>Add some more stuff to the <code>mkdocs.yml</code> file:</p> <pre><code>site_author: David G Oppenheimer\nsite_description: &gt;-\nNotes on carrying out and analyzing the results from molecular dynamics simulations\n# Copyright\ncopyright: Copyright &amp;copy; 2022 David G Oppenheimer\n</code></pre>"},{"location":"user-guide/building-this-site/#remove-the-get-insiders-button","title":"Remove the <code>Get Insiders</code> Button","text":"<p>Delete the following from <code>home.html</code>:</p> <pre><code>    &lt;a href=\"{{ 'insiders/' | url }}\" title=\"Material for MkDocs Insiders\" class=\"md-button\"&gt;\n      Get Insiders\n    &lt;/a&gt;\n</code></pre>"},{"location":"user-guide/building-this-site/#change-text-on-the-landing-page","title":"Change Text on the Landing Page","text":"<p>In <code>home.html</code>, make the following changes:</p> <p>Remove the <code>Set up in 5 minutes.</code> text. Change <code>Technical documentation that just works</code> to <code>Molecular dynamics simulations for fun and profit</code> Change <code>Quick Start</code> to <code>Get Started</code>.</p> <p>Test the site on GitHub.</p> <p>No joy.</p> <p>Add <code>site_url: https://dgoppenheimer.github.io/md-sims/</code> to <code>mkdocs.yml</code>.</p> <p>Success</p>"},{"location":"user-guide/building-this-site/#change-colors-on-the-landing-page","title":"Change Colors on the Landing Page","text":"<p>The lower purple is okay, but I want to see how it looks with a lighter blue on top.</p> <p>Add this to <code>mkdocs.yml</code>:</p> <pre><code>theme:\npalette:\nprimary: blue\n</code></pre> <p>Info</p> <p>So far, so good.</p>"},{"location":"user-guide/building-this-site/#adjust-header","title":"Adjust Header","text":"<p>I want to remove the <code>For updates follow @squidfunk on Twitter</code> banner from the top of the Landing Page. This is declared in the <code>docs/overrides/main.html</code> file. Delete the following:</p> <pre><code>{% block announce %}\n  &lt;a href=\"https://twitter.com/squidfunk\"&gt;\n    For updates follow &lt;strong&gt;@squidfunk&lt;/strong&gt; on\n    &lt;span class=\"twemoji twitter\"&gt;\n      {% include \".icons/fontawesome/brands/twitter.svg\" %}\n    &lt;/span&gt;\n&lt;strong&gt;Twitter&lt;/strong&gt;\n&lt;/a&gt;\n{% endblock %}\n</code></pre> <p>The footer is missing from the front page, but that's okay--it's not really needed.</p>"},{"location":"user-guide/building-this-site/#change-the-favicon-and-logo","title":"Change the favicon and logo","text":"<p>See Changing the logo and icons for instructions.</p> <p>Add files to the appropriate directories and add this to <code>mkdocs.yml</code>:</p> <pre><code>theme:\nlogo: assets/logo.svg\nfavicon: assets/images/favicon.png\n</code></pre> <p>Success</p> <p>Worked like a charm.</p>"},{"location":"user-guide/building-this-site/#changing-page-title","title":"Changing Page Title","text":"<p>The <code>nav</code> part of <code>mkdocs.yml</code> takes precedence when setting the page title. But I want a longer title on the page and a shorter one for the navigation links. I found this solution in the mkdocs issues. Put this code in your <code>/overrides/main.html</code> file.</p> <pre><code>{% extends \"base.html\" %}\n{% if page.toc|first is defined %}\n{% set _title = page.toc.items[0].title %}\n{% else %}\n{% set _title = page.title|striptags %}\n{% endif %}\n{% block htmltitle %}\n&lt;title&gt;{{ _title }}&lt;/title&gt;\n{% endblock %}\n</code></pre>"},{"location":"user-guide/building-this-site/#navigation","title":"Navigation","text":"<p>See Setting up navigation in the Material theme documentation for excellent instructions.</p>"},{"location":"user-guide/building-this-site/#anchor-tracking","title":"Anchor Tracking","text":"<p>Add the following to the <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.tracking\n</code></pre>"},{"location":"user-guide/building-this-site/#navigation-tabs","title":"Navigation Tabs","text":"<p>Add the following to the <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.tabs\n- navigation.tabs.sticky\n</code></pre>"},{"location":"user-guide/building-this-site/#back-to-top-button","title":"Back to Top Button","text":"<p>Add the following to the <code>mkdocs.yml</code>:</p> <pre><code>theme:\nfeatures:\n- navigation.top\n</code></pre> <p>Okay, all these features so far are working perfectly. The rest is pretty straightforward--just add and organize content.</p>"},{"location":"user-guide/building-this-site/#tags","title":"Tags","text":"<p>I'm not sure that the tags feature will be useful on this site. I say this because the search feature provided by MkDocs and the Material theme appears to be excellent.</p> <p>Add the following to the <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- meta\nplugins:\n- tags\n</code></pre>"},{"location":"user-guide/building-this-site/#footnotes","title":"Footnotes","text":"<pre><code>markdown_extensions:\n- footnotes\n</code></pre>"},{"location":"user-guide/building-this-site/#mathjax","title":"MathJax","text":"<pre><code>$$\n\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\n$$\n</code></pre> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]"},{"location":"user-guide/building-this-site/#admonitions","title":"Admonitions","text":"<p>Admonitions are also called call out boxes, and are a nice way to introduce notes or comments without greatly disrupting the flow of the document. I use Obsidian to take notes and compose markdown documents. The Obsidian syntax for call outs is different from the syntax for admonitions in Material for MkDocs. This precludes moving documents composed in Obsidian directly to MkDocs if you want admonitions to work. However, this problem is solved by the mkdocs-callouts 1.9.0 plugin, which converts the Obsidian syntax to the Material for MkDocs syntax.</p>"},{"location":"user-guide/building-this-site/#install-the-mkdocs-callouts-plugin","title":"Install the mkdocs-callouts plugin","text":"<pre><code>cd ~/Sites/md-sims\npip install mkdocs-callouts\n</code></pre>"},{"location":"user-guide/building-this-site/#enable-the-plugin-in-mkdocsyml","title":"Enable the plugin in <code>mkdocs.yml</code>","text":"<p>Add the following line to the <code>plugins</code> section of <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - mkdocs-video\n  - search\n  - callouts\n</code></pre>"},{"location":"user-guide/building-this-site/#image-captions","title":"Image Captions","text":"<p>markdown_captions</p> <p>Install using <code>pip</code>.</p> <pre><code>pip install markdown-captions\n</code></pre> <p>Use the extension as follows.</p> <p>Also using the Markdown extension, <code>attr_list</code>.</p> <pre><code>![image caption](https://github.com/dgoppenheimer/notebook-images/blob/main/g-create.png?raw=true){: style=\"height:150px;width:150px\"\"}\n</code></pre> <p>Add the following to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- markdown_captions\n</code></pre> <p>I got an error building the site:</p> <pre><code>ERROR    -  Config value 'markdown_extensions': Failed to load extension\n            'markdown_captions'.\n            ModuleNotFoundError: No module named 'markdown_captions'\nAborted with 1 Configuration Errors!\n</code></pre> <p>Fix with:</p> <pre><code>pip install markdown_captions\n</code></pre> <p>Add <code>- run: pip install markdown_captions</code> to <code>ci.yml</code></p> <p></p> <p>Herp derpsum merpus ler derperker herpderpsmer. Pee sherper dee serp. Merpus re se ter derpsum me sherper herpler. Cerp herp derpy herpderpsmer tee. Herpem de mer, zerpus derpler sherpus der herpderpsmer ner. Merpus nerpy sherlamer derp! Me der berps, derp sherlamer. Ner derpsum se derpler nerpy. Derperker se derpus perper sherper. Re nerpy de derps ter. Herpderpsmer ler derpy ner pee derpsum herpem, cerp berp? Serp er zerpus merp berps terpus derperker cerp ler derp? Sherlamer derpler re, sherp derpus. Mer ner serp derpus cerp derpler ler perper. Herderder derp derpsum mer!</p> <p>You can see that <code>markdown_captions</code> cannot use the <code>attr_list</code> without making a mess of the resulting figure and caption.</p> <p>From the Images section of the Material documentation:</p> <pre><code>&lt;figure markdown&gt;\n  ![Image title](https://dummyimage.com/600x400/){ width=\"300\", align=\"left\" }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p> </p> Image caption <p>Herp derpsum merpus ler derperker herpderpsmer. Pee sherper dee serp. Merpus re se ter derpsum me sherper herpler. Cerp herp derpy herpderpsmer tee. Herpem de mer, zerpus derpler sherpus der herpderpsmer ner. Merpus nerpy sherlamer derp! Me der berps, derp sherlamer. Ner derpsum se derpler nerpy. Derperker se derpus perper sherper. Re nerpy de derps ter. Herpderpsmer ler derpy ner pee derpsum herpem, cerp berp? Serp er zerpus merp berps terpus derperker cerp ler derp? Sherlamer derpler re, sherp derpus. Mer ner serp derpus cerp derpler ler perper. Herderder derp derpsum mer!</p> <p> </p> Image caption <p>With no width attribute:</p> <p> </p> Image caption <p>Below, image caption and left alignment was specified.</p> <pre><code>&lt;figure markdown&gt;\n  ![alt](https://dummyimage.com/250x250/){ align=left }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p> </p> Image caption <p>Herp derpsum merpus ler derperker herpderpsmer. Pee sherper dee serp. Merpus re se ter derpsum me sherper herpler. Cerp herp derpy herpderpsmer tee. Herpem de mer, zerpus derpler sherpus der herpderpsmer ner. Merpus nerpy sherlamer derp! Me der berps, derp sherlamer. Ner derpsum se derpler nerpy. Derperker se derpus perper sherper. Re nerpy de derps ter. Herpderpsmer ler derpy ner pee derpsum herpem, cerp berp?</p> <p>But the alignment does not work.</p> <p>It looks like the alignment will work only within <code>markdown</code>, but not within <code>html</code>.</p> <pre><code>![Image title](https://dummyimage.com/200x200/eee/aaa){ align=\"left\" }\n</code></pre> <p>Renders to:</p> <p></p> <p>Herp derpsum merpus ler derperker herpderpsmer. Pee sherper dee serp. Merpus re se ter derpsum me sherper herpler. Cerp herp derpy herpderpsmer tee. Herpem de mer, zerpus derpler sherpus der herpderpsmer ner. Merpus nerpy sherlamer derp! Me der berps, derp sherlamer. Ner derpsum se derpler nerpy. Derperker se derpus perper sherper. Re nerpy de derps ter. Herpderpsmer ler derpy ner pee derpsum herpem, cerp berp?</p> <p>But you don't get a caption.</p> <p> </p> <p></p> <p>Herp derpsum merpus ler derperker herpderpsmer. Pee sherper dee serp. Merpus re se ter derpsum me sherper herpler. Cerp herp derpy herpderpsmer tee. Herpem de mer, zerpus derpler sherpus der herpderpsmer ner. Merpus nerpy sherlamer derp! Me der berps, derp sherlamer. Ner derpsum se derpler nerpy. Derperker se derpus perper sherper. Re nerpy de derps ter. Herpderpsmer ler derpy ner pee derpsum herpem, cerp berp?</p> <p> </p> <p>For Google Colab images, using <code>html</code> in <code>markdown</code> allows both resizing the image and specifying its alignment. But you still don't get a caption.</p> <pre><code>[&lt;img src=\"https://github.com/dgoppenheimer/notebook-images/blob/main/connect.png?raw=true\" alt=\"connect to a runtime\" width=\"250\" align=\"right\"/&gt;](https://github.com/dgoppenheimer/notebook-images/blob/main/connect.png?raw=true)\n</code></pre> <p></p> <p>One last attempt.</p> <pre><code>&lt;figure markdown&gt;\n  ![&lt;img src=\"https://dummyimage.com/600x400/\" alt=\"dummy image\" width=\"250\" align=\"right\"/&gt;](https://dummyimage.com/600x400/)\n  &lt;figcaption&gt;Caption: this image should be small and on the right&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p> </p> Caption: this image should be small and on the right <p> </p> Caption: this image should be small in the center"},{"location":"user-guide/building-this-site/#a-locally-served-image","title":"a locally served image","text":"<pre><code>![an image](../assets/images/using-plotly/fig1.png){ width=\"300\" }\n</code></pre> <p>Renders to</p> <p></p> <p>No image caption, and default alignment is left.</p> <pre><code>&lt;figure markdown&gt;\n  ![alt](../assets/images/using-plotly/fig1.png){ width=\"300\" }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p>Renders to</p> <p> </p> Image caption <p>No image caption, and default alignment is center.</p> <p>Note</p> <p>Okay, this is not perfect, but works well enough. I can get images and resize them for the Jupyter notebooks, and I can serve local images for testing purposes. I can get captions and alignment some of the time.</p>"},{"location":"user-guide/images-video/","title":"Images and Videos","text":""},{"location":"user-guide/images-video/#images-and-videos","title":"Images and Videos","text":""},{"location":"user-guide/images-video/#images","title":"Images","text":"<p>The Material for MkDocs documentation is the place to start for information on how to add images to pages.  </p> <p>In addition to <code>attr_list</code> and <code>md_in_html</code>, I also added <code>markdown_captions</code> to my <code>mkdocs.yml</code> file:</p> <pre><code>markdown_extensions:\n- attr_list\n- md_in_html\n- markdown_captions\n</code></pre> <p>However, when I built the site I got the following error:</p> <pre><code>ERROR    -  Config value 'markdown_extensions': Failed to load extension\n        'markdown_captions'.\n        ModuleNotFoundError: No module named 'markdown_captions'\n</code></pre> <p>Doh! I forgot to install the extension!</p> <pre><code>pip install markdown_captions\n</code></pre> <p>And add it to <code>ci.yml</code>:</p> <pre><code>name: ci on:\npush:\nbranches:\n- main\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\n- uses: actions/setup-python@v2\nwith:\npython-version: 3.x\n- run: pip install mkdocs-material - run: pip install mkdocs-video\n- run: pip install markdown_captions\n- run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"user-guide/images-video/#image-tests","title":"Image Tests","text":"<p>See the Material for MkDocs documentation for images for these examples.</p>"},{"location":"user-guide/images-video/#image-alignment-and-size-with-attr_list","title":"Image Alignment and size with <code>attr_list</code>","text":"<pre><code>![Image title](https://dummyimage.com/600x400/eee/aaa){  width=\"300\" align=left }\n</code></pre> <p> Donec congue pretium sollicitudin. Proin malesuada consectetur lectus, ac commodo lorem posuere ut. In sem nisi, malesuada quis nibh ut, sagittis gravida velit. Mauris sed posuere ligula. Cras suscipit mauris eu dictum porta. Pellentesque maximus tortor ultrices, blandit risus ut, facilisis massa. Aliquam et dolor eu dolor pretium porta. Nulla fermentum erat ante, nec hendrerit metus sodales et. Donec eget risus at odio pulvinar aliquam. Aenean sit amet mattis erat.</p> <p>Note</p> <p>The image alignment does not work if both <code>attr_list</code> and <code>markdown_captions</code> are enabled in <code>mkdocs.yml</code>. The <code>markdown_captions</code> extension uses the image title as the image caption. Since it doesn't work with <code>attr_list</code>, I will disable it for now.</p> <p>Success</p> <p>This works fine.</p>"},{"location":"user-guide/images-video/#image-captions-using-md_in_html","title":"Image Captions using <code>md_in_html</code>","text":"<pre><code>&lt;figure markdown&gt;\n  ![Image title](https://dummyimage.com/600x400/eee/aaa){ width=\"300\" align=left }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> Image caption <p>Nunc fringilla consectetur augue sit amet commodo. Curabitur turpis augue, euismod ac mauris ut, porta accumsan dui. Curabitur in elementum urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed egestas odio nulla, non blandit metus mattis sed. Nunc pellentesque lobortis dolor non bibendum. Cras eu elit leo. Morbi in imperdiet sapien, quis accumsan nunc.</p> <p>Failure</p> <p>The re-sizing works, but the alignment does not.</p> <p>This is not a big problem. I usually center images anyway, and most of the time I will be using the images in Jupyter notebooks on Colab. Jupyter's markdown parser is fairly basic so I will likely be using <code>html</code> to display images.</p> <p>UPDATE: See the answer to Is it possible to caption an aligned image? in the Material for MkDocs discussion forum. The key is to use the <code>inline</code> (left alignment) and <code>inline end</code> (right alignment) modifiers set up for admonitions.</p> <pre><code>&lt;figure class=\"inline end\" markdown&gt;\n  ![Image title](https://dummyimage.com/600x400/eee/aaa){ width=\"300\" }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p> </p> Image caption <p>Nunc fringilla consectetur augue sit amet commodo. Curabitur turpis augue, euismod ac mauris ut, porta accumsan dui. Curabitur in elementum urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed egestas odio nulla, non blandit metus mattis sed. Nunc pellentesque lobortis dolor non bibendum. Cras eu elit leo. Morbi in imperdiet sapien, quis accumsan nunc.</p> <p>Success</p> <p>Sweet! I'm lovin' it!</p>"},{"location":"user-guide/images-video/#images-on-google-colab","title":"Images on Google Colab","text":"<p>There are a few requirements that I have for using images in Jupyter notebooks on Google Colab:</p> <ol> <li>I do not want to have to store the images in Colab or on my Google drive. This will take up valuable space as well as needing to transfer the images each time I use the notebook. This means being able to access the images over the web.</li> <li>I want to be able to change the size of the images as I embed them.</li> <li>I would like to be able to add image captions when I need them.</li> <li>I would like the option of specifying the image alignment.</li> </ol> <p>Here we will try the following:</p> <pre><code>&lt;figure markdown&gt;\n  [&lt;img src=\"https://dummyimage.com/600x400/eee/aaa\" alt=\"dummy image\" width=\"250\" align=\"left\"/&gt;](https://dummyimage.com/600x400/eee/aaa)\n  &lt;figcaption&gt;Caption: this image should be small and on the left&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p> </p> Caption: this image should be small and on the left <p>Nunc fringilla consectetur augue sit amet commodo. Curabitur turpis augue, euismod ac mauris ut, porta accumsan dui. Curabitur in elementum urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed egestas odio nulla, non blandit metus mattis sed. Nunc pellentesque lobortis dolor non bibendum. Cras eu elit leo. Morbi in imperdiet sapien, quis accumsan nunc.</p> <p>Note</p> <p>When we use the <code>&lt;figcaption&gt;</code> tag, the alignment applies to the caption and image as opposed to the image+caption relative to the surrounding text. But we still get image resizing, which is good. To make it a bit simpler, we could remove the markdown link notation [...](...), which links the image to the full-sized image. So far this solves 1 and 2, sometimes 3, but not 4.</p> <p>Another interesting thing is that if you put quotes around the <code>left</code>, then the caption is on the right side of the image.</p> <p>Next we will try using <code>html</code> in <code>markdown</code> to achieve image resizing and alignment (but no caption)</p> <pre><code>[&lt;img src=\"https://github.com/dgoppenheimer/notebook-images/blob/main/connect.png?raw=true\" alt=\"connect to a runtime\" width=\"350\" align=\"right\"/&gt;](https://github.com/dgoppenheimer/notebook-images/blob/main/connect.png?raw=true)\n</code></pre> <p></p> <p>Nunc fringilla consectetur augue sit amet commodo. Curabitur turpis augue, euismod ac mauris ut, porta accumsan dui. Curabitur in elementum urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed egestas odio nulla, non blandit metus mattis sed. Nunc pellentesque lobortis dolor non bibendum. Cras eu elit leo. Morbi in imperdiet sapien, quis accumsan nunc.</p> <p>Note</p> <p>This solves 1, 2, and 4, but not 3.</p> <p>The <code>markdown_captions</code> extension does not help very much. You only get centered images using the image title as the caption.</p> <p>To get more sophisticated image captions, I'll have to use <code>CSS</code>. This will be fine for the MkDocs site, but will likely be too complicated to use for routine Jupyter notebooks.</p>"},{"location":"user-guide/images-video/#videos","title":"Videos","text":"<p>Install the MkDocs plugin for video:</p> <pre><code>pip install mkdocs-video\n</code></pre> <p>Enable the plugin in <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- mkdocs-video\n</code></pre> <p>Add the installation to <code>ci.yml</code>:</p> <pre><code>jobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - run: pip install mkdocs-video\n</code></pre>"},{"location":"user-guide/images-video/#usage","title":"Usage","text":"<pre><code>![type:video](https://www.youtube.com/embed/LXb3EKWsInQ)\n</code></pre>"},{"location":"user-guide/introduction/","title":"Introduction","text":""},{"location":"user-guide/introduction/#introduction","title":"Introduction","text":"<p>I created this site to store my motes during development of my course, Practical Molecular Dynamics, which ultimately morphed into An AI Approach to Drug Discovery. Since I was taking my notes using Markdown, I knew that organizing my notes as a website was the best way to go. I previously built a notes site using Hugo and the Hugo Learn documentation theme, and it worked pretty well. This time I wanted something a bit different so I looked at other Hugo documentation themes, but didn't find anything that suited my needs. The Docsy theme was close, but not quite right.</p> <p>After looking at a few different static site generators, I eventually chose MkDocs and the Material theme for this site. MkDocs has all the features I want, and the Material theme is good looking, functional, and flexible.</p>"},{"location":"user-guide/using-plotly/","title":"Using Plotly","text":"<p>Much of the analysis of MD simulations involves creating plots and graphs to summarize the data. The Python environment of Google Colab provides access to many of most popular plotting programs including R, Matplotlib, Seaborn, Plotly, and others. After reading about the pros and cons of the various packages I settled on Plotly. Plotly is powerful, offers 3D graphing and interactive plots, and has flexible styling for making publication-quality figures. And of course, it runs well in Jupyter notebooks.</p>"},{"location":"user-guide/using-plotly/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this exercise, students will be able to do the following:</p> <ol> <li>Install Plotly in Colab.</li> <li>View a data table.</li> <li>Create an interactive plot of the data in a table.</li> <li>Add style to figures to enhance the visual hierarchy to easily distinguish the important elements from the peripheral.</li> <li>Combine multiple plots into a single figure.</li> <li>Locate additional resources on using Plotly in Colab.</li> </ol>"},{"location":"user-guide/using-plotly/#resources","title":"Resources","text":"<ul> <li>Plotly Tutorial for Beginners: Nice examples for most of the types of plots one would use.  </li> <li>Plotly Basics: This tutorial explains the code very well.  </li> <li>Getting Started with Plotly in Python: Go to the source for getting Plotly up and running.  </li> <li>Data Visualization with Plotly Express </li> <li>Getting Plotly working in Jupyter Lab and fastpages </li> <li>Plotly Express in Python</li> </ul>"},{"location":"user-guide/using-plotly/#getting-started","title":"Getting Started","text":"<ul> <li>Switch to appropriate Google Account.</li> <li>Start a new notebook.</li> <li>Make sure you are still in the appropriate account.</li> <li>Mount Google Drive.</li> </ul> <p>First, see if Plotly is installed:</p> <pre><code>import plotly\nplotly.__version__\n5.5.0 # Plotly 5.5 is already installed in Colab\n</code></pre>"},{"location":"user-guide/using-plotly/#saving-images-of-plots","title":"Saving Images of Plots","text":"<p>I want to include a few images of the plots produced by Plotly in this website even though it is not needed in Colab. See Static Image Export in Python for instructions.</p> <pre><code>pip install -U kaleido\n</code></pre> <p>Warning</p> <p>The <code>pip</code> installation did not work. I kept getting an error message that <code>kaleido</code> was not installed even though it installed successfully. This was solved by installing <code>kaleido</code> using <code>conda</code>.</p> <pre><code>!pip install -q condacolab\nimport condacolab\ncondacolab.install()\n</code></pre> <p>Once the kernel reboots, you are good to go.</p> <pre><code>!conda install -c conda-forge python-kaleido\n</code></pre> <p>Okay. Now we can export a plot as an image by including <code>fig.write_image(\"fig1.png\")</code> in our code.</p>"},{"location":"user-guide/using-plotly/#using-plotly-in-colab","title":"Using Plotly in Colab","text":"<p>Let's plot something. See IV_Plotly for most of the code, below.</p> <pre><code>import plotly.graph_objects as go\nimport numpy as np\nfig = go.Figure()\nconfig = dict({'scrollZoom': True})\nfig.add_trace(\ngo.Scatter(\nx=[1, 2, 3],\ny=[1, 3, 1]))\nfig.show(config=config)\nfig.write_image(\"fig1.png\")\n</code></pre> <p> </p> Here is a Plotly plot <p>Let's try another plot.</p> <pre><code>import plotly.express as px\niris = px.data.iris()\nfig = px.scatter(iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", marginal_y=\"violin\",\nmarginal_x=\"box\", trendline=\"ols\")\nfig.show()\nfig.write_image(\"fig2.png\")\n</code></pre> <p></p> <p>Success</p> <p>And my favorite--a box plot!</p> <p></p> <p>Let's look at the underlying data as a table.</p> <pre><code>import plotly.graph_objects as go\nimport pandas as pd\nimport plotly.express as px\ndf = px.data.tips()\nfig = go.Figure(data=[go.Table(\nheader=dict(values=list(df.columns),\nfill_color='paleturquoise',\nalign='left'),\ncells=dict(values=df.values.T,\nfill_color='lavender',\nalign='left'))\n])\nfig.show()\nfig.write_image(\"fig3.png\") # make a figure\n</code></pre> <p></p> <p>Note</p> <p>The table is scrollable in Colab</p> <p>I uploaded some <code>.dat</code> files from RMSD measurements from analyzing an MD trajectory in VMD.</p> <p>Here is some useful Plotly information:</p> <ul> <li><code>df.index</code> returns the list of the index, in our case, it\u2019s just integers 0, 1, 2, \u2026, 97.</li> <li><code>df.columns</code> gives the list of the column (header) names.</li> </ul> <p>This code:</p> <pre><code>import plotly.graph_objects as go\nimport pandas as pd\nimport plotly.express as px\ndf = pd.read_csv('/content/rmsd-core.dat',\nsep='\\s\\s+', engine='python')\ndf.columns\n</code></pre> <p>Returns: <code>Index(['frame', 'mol0'], dtype='object')</code></p> <pre><code>df.mol0 # gets the data in the specified column\n# this wont work if the column has a space in it\n</code></pre> <pre><code>0       NaN\n1     0.405\n2     0.507\n3     0.606\n4     0.657\n      ...  93    1.914\n94    1.898\n95    1.951\n96    1.953\n97    1.932\nName: mol0, Length: 98, dtype: float64\n</code></pre> <p>See Get values in rows and columns in Pandas</p> <p></p><pre><code>dataframe['column name']\n</code></pre> dataframe = df use double square brackets for multiple columns <pre><code>dataframe[ ['column name 1', 'column name 2', 'column name 3', ... ] ]\n</code></pre> <p><code>df.loc[row, column]</code>. column is optional, and if left blank, we can get the entire row.</p> <p>Let's look at one of the files I uploaded to Colab, <code>msd-core.dat</code>.</p> <pre><code>import plotly.graph_objects as go\nimport pandas as pd\nimport plotly.express as px\ndf = pd.read_csv('/content/rmsd-core.dat',\nsep='\\s\\s+', engine='python')\n# The above code creates a dataframe (df) from reading a csv file.\n# our file was not really a csv file, so we need to specify\n# the delimiter (spaces, using Regex), and the engine \n# that does the reading\nfig = go.Figure(data=[go.Table(\nheader=dict(values=list(df.columns),\nfill_color='paleturquoise',\nalign='center'),\ncells=dict(values=[df.frame, df.mol0],\nfill_color='lavender',\nalign='left'))\n])\n# The above code creates a figure from the dataframe,\n# and styles the header and the cells of the table.\nfig.update_layout(width=500) # limits the table to a width of 500px\nfig.show() # shows the figure\nfig.write_image(\"rmsd-core.dat.png\") # make a png of the figure\n</code></pre> <p></p>"},{"location":"user-guide/using-plotly/#styling-plots","title":"Styling Plots","text":"<p>To make it easier to assign colors to plots, I included a cell that contains code to produce swatches of named colors that will work in Colab. This code comes from the List of named colors page from the Matplotlib documentation website. On Colab, I put this code into a form so I can keep it out of the way.</p> Color FigureCode <p></p> <pre><code>#@title Named Colors Code\n\"\"\"\n====================\nList of named colors\n====================\nThis plots a list of the named colors supported in matplotlib. Note that\n:ref:`xkcd colors &lt;xkcd-colors&gt;` are supported as well, but are not listed here\nfor brevity.\nFor more information on colors in matplotlib see\n* the :doc:`/tutorials/colors/colors` tutorial;\n* the `matplotlib.colors` API;\n* the :doc:`/gallery/color/color_demo`.\n\"\"\"\nfrom matplotlib.patches import Rectangle\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\ndef plot_colortable(colors, title, sort_colors=True, emptycols=0):\ncell_width = 212\ncell_height = 22\nswatch_width = 48\nmargin = 12\ntopmargin = 40\n# Sort colors by hue, saturation, value and name.\nif sort_colors is True:\nby_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgb(color))),\nname)\nfor name, color in colors.items())\nnames = [name for hsv, name in by_hsv]\nelse:\nnames = list(colors)\nn = len(names)\nncols = 4 - emptycols\nnrows = n // ncols + int(n % ncols &gt; 0)\nwidth = cell_width * 4 + 2 * margin\nheight = cell_height * nrows + margin + topmargin\ndpi = 72\nfig, ax = plt.subplots(figsize=(width / dpi, height / dpi), dpi=dpi)\nfig.subplots_adjust(margin/width, margin/height,\n(width-margin)/width, (height-topmargin)/height)\nax.set_xlim(0, cell_width * 4)\nax.set_ylim(cell_height * (nrows-0.5), -cell_height/2.)\nax.yaxis.set_visible(False)\nax.xaxis.set_visible(False)\nax.set_axis_off()\nax.set_title(title, fontsize=24, loc=\"left\", pad=10)\nfor i, name in enumerate(names):\nrow = i % nrows\ncol = i // nrows\ny = row * cell_height\nswatch_start_x = cell_width * col\ntext_pos_x = cell_width * col + swatch_width + 7\nax.text(text_pos_x, y, name, fontsize=14,\nhorizontalalignment='left',\nverticalalignment='center')\nax.add_patch(\nRectangle(xy=(swatch_start_x, y-9), width=swatch_width,\nheight=18, facecolor=colors[name], edgecolor='0.7')\n)\nreturn fig\nplot_colortable(mcolors.BASE_COLORS, \"Base Colors\",\nsort_colors=False, emptycols=1)\nplot_colortable(mcolors.TABLEAU_COLORS, \"Tableau Palette\",\nsort_colors=False, emptycols=2)\n# sphinx_gallery_thumbnail_number = 3\nplot_colortable(mcolors.CSS4_COLORS, \"CSS Colors\")\n# Optionally plot the XKCD colors (Caution: will produce large figure)\n# xkcd_fig = plot_colortable(mcolors.XKCD_COLORS, \"XKCD Colors\")\n# xkcd_fig.savefig(\"XKCD_Colors.png\")\n# to save a copy of this figure\n# plt.savefig('named-colors.png')\n# plt.savefig must be before plt.show\nplt.show()\n#############################################################################\n#\n# .. admonition:: References\n#\n#    The use of the following functions, methods, classes and modules is shown\n#    in this example:\n#\n#    - `matplotlib.colors`\n#    - `matplotlib.colors.rgb_to_hsv`\n#    - `matplotlib.colors.to_rgba`\n#    - `matplotlib.figure.Figure.get_size_inches`\n#    - `matplotlib.figure.Figure.subplots_adjust`\n#    - `matplotlib.axes.Axes.text`\n#    - `matplotlib.patches.Rectangle`\n</code></pre>"},{"location":"user-guide/using-plotly/#making-plots","title":"Making Plots","text":"<p>Okay, let's plot some data. I uploaded <code>.dat</code> files from the RMSD analysis in VMD for three different domains of the Adk protein. We can look at the RMSD of each domain separately.</p> <p>First I'll try to reproduce the plot made by VMD.</p> <pre><code>import plotly.graph_objects as go\nimport pandas as pd\nimport plotly.express as px\ndf = pd.read_csv('/content/rmsd-core.dat', sep='\\s\\s+', engine='python')\nfig = px.line(df, x=\"frame\", y=\"mol0\", title='RMSD of CORE',\nlabels=dict(frame=\"simulation frame\", mol0=\"RMSD vs t=0\")\n)\nfig.update_layout(width=600)\nfig.show()\n</code></pre> <p></p> <p>Success</p> <p>Now let's try the LID domain. I already uploaded the <code>rmsd-lid.dat</code> file. We'll start by looking at the data table.</p> <pre><code>import plotly.graph_objects as go\nimport pandas as pd\nimport plotly.express as px\ndf = pd.read_csv('/content/rmsd-lid.dat',\nsep='\\s\\s+', engine='python')\ndf.columns\n</code></pre> <p>The output is: <code>Index(['frame', 'mol0'], dtype='object')</code>, and we see that the columns are labeled <code>frame</code> and <code>mol0</code> like before.</p> TableCode <p></p> <pre><code>import plotly.graph_objects as go\nimport pandas as pd\nimport plotly.express as px\ndf = pd.read_csv('/content/rmsd-lid.dat',\nsep='\\s\\s+', engine='python')\nfig = go.Figure(data=[go.Table(\nheader=dict(values=list(df.columns),\nfill_color='paleturquoise',\nalign='center'),\ncells=dict(values=[df.frame, df.mol0],\nfill_color='lavender',\nalign='left'))\n])\nfig.update_layout(width=500)\nfig.show()\n</code></pre> <p>Success</p> <p>Let's make a plot.</p> PlotCode <p></p> <pre><code>df = pd.read_csv('/content/rmsd-lid.dat', sep='\\s\\s+', engine='python')\nfig = px.line(df, x=\"frame\", y=\"mol0\", title='RMSD of LID Domain',\nlabels=dict(frame=\"simulation frame\", mol0=\"RMSD vs t=0\")\n)\nfig.update_layout(width=600)\nfig.show()\n</code></pre> <p>Success</p> <p>It would be useful to see all traces on the same figure. Let's give it a whirl.</p> <p>In this method, each <code>.dat</code> file is read into a separate dataframe, and individual figures are produced. Each figure can be styled independently. Then all the figures are combined into one composite figure.</p> Figure legend topCode legend topFigure legend bottomCode legend bottom <p></p> <pre><code>import plotly.express as px\nimport plotly.graph_objects as go\nimport pandas as pd\n# Create dataframes for each file\ndf = pd.read_csv('/content/rmsd-core.dat', sep='\\s\\s+', engine='python')\ndf2 = pd.read_csv('/content/rmsd-lid.dat', sep='\\s\\s+', engine='python')\ndf3 = pd.read_csv('/content/rmsd-nmp.dat', sep='\\s\\s+', engine='python')\n# create figure 1\nfig1 = px.line(df, x=\"frame\", y=\"mol0\") # x and y are the column names\n# change the color of the trace and add a name for the legend\nfig1.update_traces(line=dict(color = 'violet'), \nname=\"RMSD-core\")\n# create figure 2\nfig2 = px.line(df2, x=\"frame\", y=\"mol0\")\n# change the color of the trace and add a name for the legend\nfig2.update_traces(line=dict(color = 'deepskyblue'), \nname=\"RMSD-lid\")\n# create figure 3\nfig3 = px.line(df3, x=\"frame\", y=\"mol0\")\n# change the color of the trace and add a name for the legend\nfig3.update_traces(line=dict(color = 'goldenrod'), \nname=\"RMSD-nmp\")\n# construct the composite figure\nfig4 = go.Figure(data=fig1.data + fig2.data + fig3.data)\n# add the legend and the axes titles\nfig4.update_traces(showlegend=True)\nfig4.update_xaxes(title_text=\"Simulation Frame\")\nfig4.update_yaxes(title_text=\"RMSD vs t=0\")\n# change the graph width and add a graph title\nfig4.update_layout(width=600, title_text=\"RMSD for adk\")\n# to anchor the legend in the top left of the graph, this works:\n# fig4.update_layout(width=600, title_text=\"RMSD for adk\",\n#                     legend=dict(\n#     yanchor=\"top\",\n#     y=0.99,\n#     xanchor=\"left\",\n#     x=0.01\n# ))\n# show the graph\nfig4.show()\n</code></pre> <p></p> <pre><code>import plotly.express as px\nimport plotly.graph_objects as go\nimport pandas as pd\n# Create dataframes for each file\ndf = pd.read_csv('/content/rmsd-core.dat', sep='\\s\\s+', engine='python')\ndf2 = pd.read_csv('/content/rmsd-lid.dat', sep='\\s\\s+', engine='python')\ndf3 = pd.read_csv('/content/rmsd-nmp.dat', sep='\\s\\s+', engine='python')\n# create figure 1\nfig1 = px.line(df, x=\"frame\", y=\"mol0\") # x and y are the column names\n# change the color of the trace and add a name for the legend\nfig1.update_traces(line=dict(color = 'violet'), \nname=\"RMSD-core\")\n# create figure 2\nfig2 = px.line(df2, x=\"frame\", y=\"mol0\")\n# change the color of the trace and add a name for the legend\nfig2.update_traces(line=dict(color = 'deepskyblue'), \nname=\"RMSD-lid\")\n# create figure 3\nfig3 = px.line(df3, x=\"frame\", y=\"mol0\")\n# change the color of the trace and add a name for the legend\nfig3.update_traces(line=dict(color = 'goldenrod'), \nname=\"RMSD-nmp\")\n# construct the composite figure\nfig4 = go.Figure(data=fig1.data + fig2.data + fig3.data)\n# add the legend and the axes titles\nfig4.update_traces(showlegend=True)\nfig4.update_layout(\nlegend=dict(\n# the x and y positions will put legend in bottom middle of the figure\nx=0.4,\ny=0,\ntitle_text=\"Legend\",\nbgcolor=\"whitesmoke\"\n)\n)\nfig4.update_xaxes(title_text=\"Simulation Frame\")\nfig4.update_yaxes(title_text=\"RMSD vs t=0\")\n# change the graph width and add a graph title\nfig4.update_layout(width=600, title_text=\"RMSD for adk\")\n# to anchor the legend in the top left of the graph, this works:\n# fig4.update_layout(width=600, title_text=\"RMSD for adk\",\n#                     legend=dict(\n#     yanchor=\"top\",\n#     y=0.99,\n#     xanchor=\"left\",\n#     x=0.01\n# ))\n# show the graph\nfig4.show()\n</code></pre> <p>I also found a way to put all the figures on the same plot without needing to make individual dataframes. However I could only make this work by converting the files to <code>.csv</code> format. Luckily, we can do that.</p> FigureCode <p></p> <pre><code># import stuff\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom pathlib import Path\n# read the .dat file\ndf = pd.read_csv('/content/rmsd-nmp.dat',\nsep='\\s\\s+', engine='python')\n# write a .csv file\ndf.to_csv('/content/rmsd-nmp.csv', index = False, sep = \",\")\n# do it again for the other .dat files\ndf = pd.read_csv('/content/rmsd-core.dat',\nsep='\\s\\s+', engine='python')\ndf.to_csv('/content/rmsd-core.csv', index = False, sep = \",\")\ndf = pd.read_csv('/content/rmsd-lid.dat',\nsep='\\s\\s+', engine='python')\ndf.to_csv('/content/rmsd-lid.csv', index = False, sep = \",\")\n# This code iterates over a directory and makes the plot while combining\n# the csv files. \n# location where the .csv files exist\np = Path.cwd().joinpath(\"/content/\")\n# Read and concatenate all the .csv files into one dataframe, \n# creating an additional column that is the filename.\n# Plot the combined dataframe scatter (line), \n# using one plot / color per csv file.\nfig5 = px.line(\npd.concat(\n[pd.read_csv(f).assign(name=f.name) for f in p.glob(\"rmsd-*.csv\")],\n),\ncolor_discrete_map={\n'rmsd-core.csv':'goldenrod', # a color for this filename\n'rmsd-nmp.csv':'deepskyblue', # a color for this filename\n'rmsd-lid.csv':'violet' # a color for this filename\n},\nx=\"frame\", # the column to use as the X-axis\ny=\"mol0\", # the column to use as the Y-axis\ncolor=\"name\", # color each line based on filename\nlabels={\n\"frame\": \"Simulation Frame\", # a title for the X-axis\n\"mol0\": \"RMSD vs t=0\", # a title for the Y-axis\n\"name\": \"\" # figure legend title (leave empty for no title)\n})\n# to anchor the legend in the top left of the graph, uncomment\n# the code below.\n# fig5.update_layout(width=600, title_text=\"RMSD for adk\",\n#                     legend=dict(\n#     yanchor=\"top\",\n#     y=0.99,\n#     xanchor=\"left\",\n#     x=0.01\n# ))\n# Rename the traces\nnewnames = {'rmsd-core.csv':'RMSD CORE domain', \n'rmsd-nmp.csv':'RMSD NMP domain', \n'rmsd-lid.csv':'RMSD LID domain'}\nfig5.for_each_trace(lambda t: t.update(name = newnames[t.name]))\n# set the figure width and give the figure a title\nfig5.update_layout(width=700, title_text=\"RMSD for adk\")\n# To create an image of the plot, uncomment the code below.\n# fig5.write_image(\"rmsd-all-v2.png\")\n# show the figure\nfig5.show()\n</code></pre> <p>Here is a Python tool to draw a Ramachandran Plot. I especially like the tabs to see plots of specific amino acids.</p> <p>Here is a tip on Exporting Jupyter notebooks with Plotly graphs</p> <p>I think this is the answer to the Ramachandran plot of the trajectory (numpy array from MDAnalysis)</p> <p>Efficiently Creating A Pandas DataFrame From A Numpy 3d array</p> <pre><code>import numpy as np\na = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\nm,n,r = a.shape\nout_arr = np.column_stack((np.repeat(np.arange(m),n),a.reshape(m*n,-1)))\nout_df = pd.DataFrame(out_arr)\nout_df = pd.DataFrame(out_arr,columns=['a', 'b', 'c'])\n</code></pre> <p>Also see How to convert 3-D Numpy array to Pandas Dataframe?</p> <pre><code>a,b,c = X.shape\n# in your case\n# a,b,c = 1797, 500\npd.DataFrame(X.transpose(1,2,0).reshape(2,-1).T,\nindex=np.repeat(np.arange(c),a),\ncolumns=['X_coord','Y_coord'] \n)\n</code></pre> <p>Or</p> <pre><code>index = np.concatenate([np.repeat([i], 1797) for i in range(500)])\ndf = pd.DataFrame(index=index)\ndf['X-coordinate'] = X[:, 0, :].T.reshape((-1))\ndf['Y-coordinate'] = X[:, 1, :].T.reshape((-1))\n</code></pre> <p>Create a Pandas DataFrame from a Numpy array and specify the index column and column headers</p> <pre><code># Python program to Create a\n# Pandas DataFrame from a Numpy\n# array and specify the index\n# column and column headers\n# import required libraries\nimport numpy as np\nimport pandas as pd\n# creating a numpy array\nnumpyArray = np.array([[15, 22, 43],\n[33, 24, 56]])\n# generating the Pandas dataframe\n# from the Numpy array and specifying\n# name of index and columns\npanda_df = pd.DataFrame(data = numpyArray,\nindex = [\"Row_1\", \"Row_2\"],\ncolumns = [\"Column_1\",\n\"Column_2\", \"Column_3\"])\n# printing the dataframe\nprint(panda_df)\n</code></pre> <p>Example 2: In this example, the index column and column headers are generated through iteration. The range of iterations for rows and columns are defined by the shape of the Numpy array. With every iteration, a digit will be added to the predefined string and the new index column or column header will generate. Thus, if there is some pattern in naming the labels of the dataframe this approach is suitable.</p> <pre><code># Python program to Create a\n# Pandas DataFrame from a Numpy\n# array and specify the index column\n# and column headers\n# import required libraries\nimport pandas as pd\nimport numpy as np\n# creating a numpy array\nnumpyArray = np.array([[15, 22, 43],\n[33, 24, 56]])\n# generating the Pandas dataframe\n# from the Numpy array and specifying\n# name of index and columns\npanda_df = pd.DataFrame(data = numpyArray[0:, 0:],\nindex = ['Row_' + str(i + 1)\nfor i in range(numpyArray.shape[0])],\ncolumns = ['Column_' + str(i + 1)\nfor i in range(numpyArray.shape[1])])\n# printing the dataframe\nprint(panda_df)\n</code></pre> <p>Example 3: In this example, the index column and column headers are defined before converting the Numpy array into Pandas dataframe. The label names are again generated through iterations but the method is little different. Here, the number of iterations is defined by the length of the sub-array inside the Numpy array. This method can be used if the index column and column header names follow some pattern.</p> <pre><code># Python program to Create a\n# Pandas DataFrame from a Numpy\n# array and specify the index column\n# and column headers\n# import required libraries\nimport pandas as pd\nimport numpy as np\n# creating a numpy array\nnumpyArray = np.array([[15, 22, 43],\n[33, 24, 56]])\n# defining index for the\n# Pandas dataframe\nindex = ['Row_' + str(i)\nfor i in range(1, len(numpyArray) + 1)]\n# defining column headers for the\n# Pandas dataframe\ncolumns = ['Column_' + str(i)\nfor i in range(1, len(numpyArray[0]) + 1)]\n# generating the Pandas dataframe\n# from the Numpy array and specifying\n# details of index and column headers\npanda_df = pd.DataFrame(numpyArray ,\nindex = index,\ncolumns = columns)\n# printing the dataframe\nprint(panda_df)\n</code></pre> <p>Example #4: In this approach, the index column and the column headers for the Pandas dataframe will present itself in the Numpy array. During the conversion of the Numpy array into Pandas data frame, proper indexing for the sub-arrays of the Numpy array has to be done in order to get correct sequence of the dataframe labels.</p> <pre><code># Python program to Create a\n# Pandas DataFrame from a Numpy\n# array and specify the index column\n# and column headers\n# import required libraries\nimport pandas as pd\nimport numpy as np\n# creating a numpy array and\n# specifying the index and\n# column headers along with\n# data stored in the array\nnumpyArray = np.array([['', 'Column_1',\n'Column_2', 'Column_3'],\n['Row_1', 15, 22, 43],\n['Row_2', 33, 24, 56]])\n# generating the Pandas dataframe\n# from the Numpy array and specifying\n# details of index and column headers\npanda_df = pd.DataFrame(data = numpyArray[1:, 1:],\nindex = numpyArray[1:, 0],\ncolumns = numpyArray[0, 1:])\n# printing the dataframe\nprint(panda_df)\n</code></pre>"},{"location":"user-guide/using-plotly/#plotting-xvg-files","title":"Plotting <code>.xvg</code> files","text":"<p>See how can i plt this data? its file extension is .xvg</p> <p>Use <code>grep</code> to strip out comments. Then import the two columns of data into plotly.</p> <p>I got the charting to work great. See the gromacs-test notebook.</p>"},{"location":"user-guide/yet-again/","title":"Building This Site","text":""},{"location":"user-guide/yet-again/#building-this-site","title":"Building This Site","text":"<p>On GitHub I forked the <code>mkdocs-material</code> project. Go to Settings on GitHub and rename the repository to <code>md-sims</code>. Clone it locally.</p> <pre><code>cd ~/Sites\ngit clone https://github.com/dgoppenheimer/md-sims.git\ncd md-sims\ngit remote -v\n    origin  https://github.com/dgoppenheimer/md-sims.git (fetch)\norigin  https://github.com/dgoppenheimer/md-sims.git (push)\ngit status\n    On branch master\ngit branch -m master main\ngit status\n    On branch main\ngit push -u origin main\n</code></pre> <p>Go to GitHub and set default branch as main.</p> <p>Settings  Branches </p> <p>Then delete the master branch from the remote repository</p> <pre><code>git push origin --delete master\n</code></pre> <pre><code>cd md-sims\nmkdocs serve\nINFO     -  Building documentation...\nERROR    -  Config value: 'plugins'. Error: The \"redirects\" plugin is not\n            installed\nAborted with 1 Configuration Errors!\n</code></pre> <p>Open <code>mkdocs.yml</code> and delete the <code>redirects</code> and <code>minify</code> plugins.</p> <pre><code>plugins:\n  - redirects:\n      redirect_maps:\n        changelog/insiders.md: insiders/changelog.md\n        reference/meta-tags.md: reference/index.md\n        reference/variables.md: https://mkdocs-macros-plugin.readthedocs.io/\n        sponsorship.md: insiders/index.md\n        upgrading.md: upgrade.md\n  - minify:\n      minify_html: true\n</code></pre> <p>Make changes to <code>mkdocs.yml</code></p> <p>See copy of file in repository.</p> <p>Success</p><p>The site builds locally.</p> <p>Commit local changes and push to origin.</p> <p>Go to GitHub \u2192 [repository] \u2192 Settings \u2192 Pages \u2192 Source and change source to <code>gh-pages</code> (already done)</p> <p>make a change and push again.</p> <p>Change the workflow file to <code>ci.yml</code></p> <p>Success</p> <p>The site builds on GitHub pages.</p> <p>Start modifying the landing page.</p> <p>Modify <code>material/overrides/home.html</code>: Remove the text <code>Set up in 5 minutes.</code> Change the Title text to <code>Practical Molecular Dynamics</code> Delete the <code>Get Insiders</code> button. Add <code>favicon.png</code> to <code>material/assets/images/</code> and to <code>docs/assets/</code> Add the other favicon sizes to <code>docs/assets/</code> Add landing page image to <code>docs/assets/images/</code> and name it <code>illustration.png</code>. Delete announcement block from <code>material/overrides/main.html</code></p>"},{"location":"user-guide/md-analysis/analysis-amber/","title":"Analysis of MD Simulations Using AMBER","text":""},{"location":"user-guide/md-analysis/analysis-amber/#analysis-of-md-simulations-using-amber","title":"Analysis of MD Simulations Using AMBER","text":""},{"location":"user-guide/md-analysis/analysis-amber/#resources","title":"Resources","text":"<ul> <li>AMBER Tutorial: This tutorial uses a Jupyter notebook and focuses on:</li> </ul> <p>Interactive data analysis with NGLView, pytraj and Jupyter notebook</p> <ul> <li>RMSD/RMSF Analysis: This tutorial also uses a Jupyter notebook for analysis. There are some nice analyses in this tutorial.</li> </ul> <p>Summary: In this analysis tutorial, you will learn how to use AMBER's cpptraj module to calculate the RMSD and RMSF of a system. You will learn the definitions of these terms and when and how to use them in your data analysis. Additionally, you will hone your python skills in generating files, running scripts, extracting data from files and plotting with matplotlib.</p> <ul> <li>Using VMD with AMBER: Basic tutorial, but may have some useful parts. From 2015.</li> </ul>"},{"location":"user-guide/md-analysis/analysis-bio3d/","title":"Protein Structure Networks with Bio3D","text":""},{"location":"user-guide/md-analysis/analysis-bio3d/#protein-structure-networks-with-bio3d","title":"Protein Structure Networks with Bio3D","text":"<p>See the Protein Structure Networks with Bio3D website. From the website:</p> <p>Bio3 is an R package that provides interactive tools for structural bioinformatics. The primary focus of Bio3D is the analysis of bimolecular structure, sequence and simulation data.</p>"},{"location":"user-guide/md-analysis/analysis-gromacs/","title":"analysis-gromacs","text":""},{"location":"user-guide/md-analysis/analysis-gromacs/#analysis-of-md-simulations-using-gromacs","title":"Analysis of MD Simulations using GROMACS","text":"<ul> <li>Molecular Modeling Practical: This site has some simple analyses, but good explanations of GROMACS commands and good questions.</li> <li>Protein-related items: Some protein analyses including secondary structure changes over time, Ramachandran plots, and an \u03b1-helical wheel projection of your protein.</li> </ul>"},{"location":"user-guide/md-analysis/analysis-vmd/","title":"Analysis in VMD","text":""},{"location":"user-guide/md-analysis/analysis-vmd/#analyzing-a-trajectory-in-vmd","title":"Analyzing a Trajectory in VMD","text":"<p>For this exercise, I'll follow the PHY542: MD analysis with VMD tutorial.</p> <p>I downloaded the needed files from the Input files for PHY542 MD Practical.</p>"},{"location":"user-guide/md-analysis/analysis-vmd/#getting-started","title":"Getting Started","text":"<p>First, run (type into the <code>tcl</code> console) <code>logfile console</code> so that any GUI commands get logged in the console so I can see the corresponding <code>cli</code> command.</p> <ul> <li> <p>Load the topology file. </p> <ul> <li>Go to the Molecule File Browser \u2192 Browse.</li> <li>Choose <code>adk.psf</code>.</li> <li>Click Load.</li> </ul> </li> <li> <p>Load the trajectory file. </p> <ul> <li>Go to the Molecule File Browser \u2192 Load files for </li> <li>Choose <code>0:adk.psf</code>. </li> <li>Go to Browse and choose <code>adk_dims.dcd</code>.</li> <li>Under Frames, click Load all at once.</li> <li>Click Load.</li> </ul> </li> <li> <p>Play the trajectory for fun.</p> </li> <li>Make some new representations.<ul> <li>In the <code>tcl</code> console type:</li> </ul> </li> </ul> <pre><code>mol addrep 0 # adds a representation of molecule 0\nmol modselect 1 0 protein and resid 30 to 59 # changes this representation to just the NMP domain of AdK\nmol modstyle 1 0 newcartoon\nmol modcolor 1 0 ColorID 22 # cyan3\nmol addrep 0 # adds another representation of molecule 0\nmol modselect 2 0 protein and resid 122 to 159 # LID domain of AdK\nmol modstyle 2 0 newcartoon\nmol modcolor 2 0 ColorID 17 # yellow3\nmol addrep 0 # adds another representation of molecule 0\nmol modselect 3 0 protein and not (resid 30 to 59 122 to 159) or (protein and resid 1 to 29 60 to 121 160 to 214) # CORE domain of AdK\nmol modstyle 3 0 newcartoon\nmol modcolor 3 0 ColorID 6\nmol showrep 0 0 off # turn off molecule 0 (top)\n</code></pre>"},{"location":"user-guide/md-analysis/analysis-vmd/#rmsd-fitting-and-analysis-of-a-trajectory","title":"RMSD fitting and analysis of a trajectory","text":""},{"location":"user-guide/md-analysis/analysis-vmd/#superposition-and-rmsd","title":"Superposition and RMSD","text":""},{"location":"user-guide/md-analysis/analysis-vmd/#core-domain","title":"CORE Domain","text":"<ul> <li>Superimpose all trajectory frames on the CORE domain.<ul> <li>In the <code>tcl</code> console type: <code>menu rmsdtt on</code>.</li> <li>In the RMSD Trajectory Tool:<ul> <li>add <code>protein and not (resid 30 to 59 122 to 159)</code> (the CORE domain) to the box in the upper left of the widget.</li> <li>Choose <code>Backbone</code> for Selection Modifiers.</li> <li>Choose <code>Top</code> for Reference Mol.</li> </ul> </li> <li>Run RMSD. Note that the average RMSD is about 2.651\u00b10.996.</li> <li>Click the box for On/Off Frame ref: and use frame <code>0</code> for the reference.</li> <li>Run Align.</li> <li>Run RMSD again. Note that teh RMSD is now 1.521\u00b10.399.</li> <li>In the RMSD Trajectory Tool, go to File \u2192 Plot data.</li> </ul> </li> </ul>"},{"location":"user-guide/md-analysis/analysis-vmd/#lid-domain","title":"LID Domain","text":"<ul> <li>Superimpose all trajectory frames on the LID domain.<ul> <li>In the <code>tcl</code> console type: <code>menu rmsdtt on</code>.</li> <li>In the RMSD Trajectory Tool:<ul> <li>add <code>protein and resid 122 to 159</code> (the LID domain) to the box in the upper left of the widget.</li> <li>Choose <code>Backbone</code> for Selection Modifiers.</li> <li>Choose <code>Top</code> for Reference Mol.</li> </ul> </li> <li>Run RMSD. Note that the average RMSD is about 9.921\u00b14.436.</li> <li>Click the box for On/Off Frame ref: and use frame <code>0</code> for the reference.</li> <li>Run Align.</li> <li>Run RMSD again. Note that teh RMSD is now 1.013\u00b10.202.</li> <li>In the RMSD Trajectory Tool, go to File \u2192 Plot data.</li> </ul> </li> </ul>"},{"location":"user-guide/md-analysis/analysis-vmd/#nmp-domain","title":"NMP Domain","text":"<ul> <li>Superimpose all trajectory frames on the NMP domain.<ul> <li>In the <code>tcl</code> console type: <code>menu rmsdtt on</code>.</li> <li>In the RMSD Trajectory Tool:<ul> <li>add <code>protein and resid 30 to 59</code> (the NMP domain) to the box in the upper left of the widget.</li> <li>Choose <code>Backbone</code> for Selection Modifiers.</li> <li>Choose <code>Top</code> for Reference Mol.</li> </ul> </li> <li>Run RMSD. Note that the average RMSD is about 13.085\u00b17.081.</li> <li>Click the box for On/Off Frame ref: and use frame <code>0</code> for the reference.</li> <li>Run Align.</li> <li>Run RMSD again. Note that teh RMSD is now 1.342\u00b10.321.</li> <li>In the RMSD Trajectory Tool, go to File \u2192 Plot data.</li> </ul> </li> </ul> <p>using Extensions \u2023 Analysis \u2023 RMSD Trajectory Tool</p> <ol> <li><code>trj_nos.dcd</code>, which is the short form of <code>covid-spike-6vxx_1_1_1_traj_dcd</code>. Before loading, set the stride to 10 (every 10th frame will be loaded), otherwise my laptop runs out of memory and VMD crashes. With <code>stride=2</code>, the spike protein trajectory loaded with 642 frames.</li> <li><code>prot_gly_memb.psf</code></li> </ol> <p>Note</p> <p>Load the <code>*.dcd</code> file first. You may be able to load all the frames depending on the size of the trajectory file and your computer's memory. If you load the <code>*.psf</code> or a <code>*.pdb</code> file first, and then load the trajectory, the viewer will try to display each frame as it is loaded, which will likely lead to memory problems and a crash. However, the PHY542: MD analysis with VMD tutorial states:</p> <p>You always load a topology file first and then you load the trajectory data for the system.</p> <p>I need to check the VMD documentation to determine the correct order for loading the files into VMD.</p> <p>Turn of the axes from the viewer: type <code>axes location off</code> into the <code>tcl</code> console.</p> <p>Let's start by making some new representations so that we can turn off the things we don't want to see in our final image.</p>"},{"location":"user-guide/md-analysis/analysis-vmd/#add-a-lipid-representation","title":"Add a Lipid Representation","text":"<pre><code>mol addrep 0 # adds a representation of molecule 0\nmol showrep 0 0 off # turn off molecule 0 (top)\nmol modselect 1 0 protein # changed selection for rep 1 to just protein\nmol modstyle 1 0 NewCartoon\nmenu rmsdtt on # turn on the RMSD trajectory tool\n</code></pre> <p>Click <code>plot</code> and <code>noh</code> in the <code>RMSD trajectory tool</code> menu. Use <code>0</code> as the reference frame, and click <code>align</code>. Next click <code>RMSD</code>.</p> <p>I looked in the topology file <code>top_all36_lipid.rtf</code> to find all the lipid names.</p> <pre><code>resname DLPC or resname LPPC or resname DLPE or resname DLPS or resname DLPA or resname DLPG or resname DMPC or resname DMPE or resname DMPS or resname DMPA or resname DMPG or resname DPPC or resname DPPE or resname DPPS or resname DPPA or resname DPPG or resname DSPC or resname DSPE or resname DSPS or resname DSPA or resname DSPG or resname DOPC or resname DOPE or resname DOPS or resname DOPA or resname DOPG or resname POPC or resname POPE or resname POPS or resname POPA or resname POPG or resname SAPC or resname SDPC or resname SOPC or resname DAPC\n</code></pre> <p>Using the <code>atomselect</code> command.</p> <p>A quick test:</p> <pre><code>set sel [atomselect top \"resname DLPC\"]\natomselect2\n</code></pre> <pre><code>atomselect macro lipid {\nresname DLPC or resname LPPC or resname DLPE or resname DLPS or resname DLPA or resname DLPG or resname DMPC or resname DMPE or resname DMPS or resname DMPA or resname DMPG or resname DPPC or resname DPPE or resname DPPS or resname DPPA or resname DPPG or resname DSPC or resname DSPE or resname DSPS or resname DSPA or resname DSPG or resname DOPC or resname DOPE or resname DOPS or resname DOPA or resname DOPG or resname POPC or resname POPE or resname POPS or resname POPA or resname POPG or resname SAPC or resname SDPC or resname SOPC or resname DAPC\n}\nmol showrep 0 0 off # turn off molecule 0 (top)\nmol modselect 1 0 {lipid} # changed selection for rep 1 to just lipid\nmol modstyle 1 0 Lines # was the default rep_number mol_number\n</code></pre> <pre><code>mol showrep 0 0 on # turns on molecule 0, rep 0 (everything)\nmol showrep 0 1 off # turns off lipid\nmol addrep 0\nmol modselect 2 0 protein\nmol showrep 0 0 off # turns off \"all\" rep\n# just protein is remaining\nmol showrep 0 2 off # turns off protein\nmol showrep 0 0 on\n</code></pre> <p>set sel [atomselect top \"protein\"]</p> <ul> <li><code>mol showrep molecule_number rep_number [on | off]</code></li> </ul> <p>Here is the topology file: <code>top_all36_carb.rtf</code></p> <p>Each carbohydrate is preceded by <code>RESI</code> followed by an abbreviation of its name.</p> <p>I want to print out all of the <code>RESI</code> lines with the abbreviated names.</p> <p>we wish to print all the lines whose fourth column says HIS, we just use:</p> <pre><code>awk '$4==\"HIS\"' 6ane.txt\n</code></pre>"},{"location":"user-guide/md-analysis/analysis-vmd/#using-awk","title":"Using <code>awk</code>","text":"<p>By default Awk prints every line of data from the specified file.  </p> <p>See AWK command in Unix/Linux with examples</p> <p>Print the lines that match a pattern:</p> <pre><code>awk '/manager/ {print}' employee.txt </code></pre> <p>I want to match a pattern of <code>RESI</code> followed by a space and 4 capital letters.</p> <p>Regular expressions to the rescue!</p> character function \\s Selects any whitespace character \\w Selects any word [a-d] Selects any character a through d (a, b, c, or d) [:upper:] Uppercase alphabetic characters <p>For each record i.e line, the awk command splits the record delimited by whitespace character by default and stores it in the $n variables. If the line has 4 words, it will be stored in $1, $2, $3 and $4 respectively. Also, $0 represents the whole line.  </p> <p>This should print the first and second columns of all records (lines) that start with <code>RESI</code>.</p> <pre><code>awk '/RESI/ {print $1,$2}' top_all36_carb.rtf\n# output\nRESI AGLC\nRESI BGLC\nRESI AALT\nRESI BALT\nRESI AALL\nRESI BALL\nRESI AGAL\nRESI BGAL\nRESI AGUL\nRESI BGUL\nRESI AIDO\nRESI BIDO\nRESI AMAN\nRESI BMAN\nRESI ATAL\nRESI BTAL\nRESI AXYL\nRESI BXYL\nRESI AFUC\nRESI BFUC\nRESI ARHM\nRESI BRHM\nRESI AGLCA\nRESI BGLCA\nRESI BGLCA0\nRESI AIDOA\nRESI BIDOA\nRESI AGLCNA\nRESI BGLCNA\nRESI BGLCN0\nRESI AGALNA\nRESI BGALNA\nRESI ANE5AC\nRESI BNE5AC\nRESI ABEQ\nRESI ARHMOA\nRESI TIP3\nRESI MGLYOL\nRESI MERYOL\nRESI DTHROL\nRESI LTHROL\nRESI MRIBOL\nRESI DARAOL\nRESI LARAOL\nRESI MXYLOL\nRESI MALLOL\nRESI DALTOL\nRESI LALTOL\nRESI DGLUOL\nRESI LGLUOL\nRESI DMANOL\nRESI LMANOL\nRESI DGULOL\nRESI LGULOL\nRESI DIDIOL\nRESI LIDIOL\nRESI MGALOL\nRESI ALLOSE\nRESI PSICOS\nRESI INI1\nRESI INI2\nRESI INI3\nRESI INI4\nRESI INI5\nRESI ADEO\nRESI BDEO\nRESI ARIB\nRESI BRIB\nRESI AARB\nRESI BARB\nRESI ALYF\nRESI BLYF\nRESI AXYF\nRESI BXYF\nRESI AFRU\nRESI BFRU\n</code></pre> <p>Now I can do a search/replace in VS Code to generate a macro to use for <code>atomselect</code>.</p> <p>Search for <code>RESI</code> and replace with <code>resname</code>. Search for <code>\\n</code> and replace with <code>&lt;spcae&gt;</code> or <code>&lt;space&gt;</code>. Clean up the beginning and end of selection, and delete the TIP3 (water).</p> <pre><code>resname AGLC or resname BGLC or resname AALT or resname BALT or resname AALL or resname BALL or resname AGAL or resname BGAL or resname AGUL or resname BGUL or resname AIDO or resname BIDO or resname AMAN or resname BMAN or resname ATAL or resname BTAL or resname AXYL or resname BXYL or resname AFUC or resname BFUC or resname ARHM or resname BRHM or resname AGLCA or resname BGLCA or resname BGLCA0 or resname AIDOA or resname BIDOA or resname AGLCNA or resname BGLCNA or resname BGLCN0 or resname AGALNA or resname BGALNA or resname ANE5AC or resname BNE5AC or resname ABEQ or resname ARHMOA or resname MGLYOL or resname MERYOL or resname DTHROL or resname LTHROL or resname MRIBOL or resname DARAOL or resname LARAOL or resname MXYLOL or resname MALLOL or resname DALTOL or resname LALTOL or resname DGLUOL or resname LGLUOL or resname DMANOL or resname LMANOL or resname DGULOL or resname LGULOL or resname DIDIOL or resname LIDIOL or resname MGALOL or resname ALLOSE or resname PSICOS or resname INI1 or resname INI2 or resname INI3 or resname INI4 or resname INI5 or resname ADEO or resname BDEO or resname ARIB or resname BRIB or resname AARB or resname BARB or resname ALYF or resname BLYF or resname AXYF or resname BXYF or resname AFRU or resname BFRU\n</code></pre> <pre><code>atomselect macro glycan {\nresname AGLC or resname BGLC or resname AALT or resname BALT or resname AALL or resname BALL or resname AGAL or resname BGAL or resname AGUL or resname BGUL or resname AIDO or resname BIDO or resname AMAN or resname BMAN or resname ATAL or resname BTAL or resname AXYL or resname BXYL or resname AFUC or resname BFUC or resname ARHM or resname BRHM or resname AGLCA or resname BGLCA or resname BGLCA0 or resname AIDOA or resname BIDOA or resname AGLCNA or resname BGLCNA or resname BGLCN0 or resname AGALNA or resname BGALNA or resname ANE5AC or resname BNE5AC or resname ABEQ or resname ARHMOA or resname MGLYOL or resname MERYOL or resname DTHROL or resname LTHROL or resname MRIBOL or resname DARAOL or resname LARAOL or resname MXYLOL or resname MALLOL or resname DALTOL or resname LALTOL or resname DGLUOL or resname LGLUOL or resname DMANOL or resname LMANOL or resname DGULOL or resname LGULOL or resname DIDIOL or resname LIDIOL or resname MGALOL or resname ALLOSE or resname PSICOS or resname INI1 or resname INI2 or resname INI3 or resname INI4 or resname INI5 or resname ADEO or resname BDEO or resname ARIB or resname BRIB or resname AARB or resname BARB or resname ALYF or resname BLYF or resname AXYF or resname BXYF or resname AFRU or resname BFRU\n}\n</code></pre> <p>The above macro did not work, but neither did the text below.</p> <pre><code>atomselect macro lipid2 {\nresname DLPC or resname LPPC or resname DLPE or resname DLPS or resname DLPA or resname DLPG or resname DMPC or resname DMPE or resname DMPS or resname DMPA or resname DMPG or resname DPPC or resname DPPE or resname DPPS or resname DPPA or resname DPPG or resname DSPC or resname DSPE or resname DSPS or resname DSPA or resname DSPG or resname DOPC or resname DOPE or resname DOPS or resname DOPA or resname DOPG or resname POPC or resname POPE or resname POPS or resname POPA or resname POPG or resname SAPC or resname SDPC or resname SOPC or resname DAPC\n}\n</code></pre> <p>There is already a built-in macro for lipid/lipids and for glycans. (So I don't need to make my own macros) for this.</p> <pre><code>mol modselect 3 0 glycan \nmol modcolor 3 0 ResType\n</code></pre>"},{"location":"user-guide/md-analysis/analysis-vmd/#resources","title":"Resources","text":""},{"location":"user-guide/md-analysis/analysis-vmd/#chem-181-introduction-to-molecular-simulation","title":"CHEM 181 Introduction to Molecular Simulation","text":"<p>Introduction to Molecular Dynamics Trajectories: This is done in VMD. Look carefully at the section Trajectory coloring by structure. This has useful tips.</p>"},{"location":"user-guide/md-analysis/colab-mdanalysis/","title":"Using MDAnalysis in Colab","text":""},{"location":"user-guide/md-analysis/colab-mdanalysis/#using-mdanalysis-in-colab","title":"Using MDAnalysis in Colab","text":"<p>Here is a nice MDAnalysis tutorial in colab to get started.</p>"},{"location":"user-guide/md-analysis/md-analysis-notes/","title":"Analysis of MD Trajectories","text":""},{"location":"user-guide/md-analysis/md-analysis-notes/#analysis-of-md-trajectories","title":"Analysis of MD Trajectories","text":"<p>MD-Task</p> <p>From the documentation:</p> <p>MD-TASK consists of a suite of Python scripts that have been developed to analyze molecular dynamics trajectories.</p>"},{"location":"user-guide/md-analysis/md-analysis-notes/#rmsd-analysis","title":"RMSD Analysis","text":"<p>This uses the MDAnalysis package.</p> <p>See this Colab notebook for how to color protein by B-factor after RMSD analysis.</p> <p>Also RMSF is referenced 10.1371/journal.pone.0119264</p>"},{"location":"user-guide/md-analysis/ramachandran-plots/","title":"Ramachandran Plots","text":""},{"location":"user-guide/md-analysis/ramachandran-plots/#analysis-of-dihedral-angles-using-a-ramachandran-plot","title":"Analysis of Dihedral Angles Using a Ramachandran Plot","text":""},{"location":"user-guide/md-analysis/ramachandran-plots/#z-score","title":"z-score","text":"<p>See this introduction to the Ramachandran Z-score</p> <p>Also see this post on Rama-Z in PDB-REDO</p> \\[ z = \\frac{x-\\mu}{\\sigma} \\] <p>where:</p> <p>\\(x\\) is the measured value \\(\\mu\\) is the mean of the population and \\(\\sigma\\) is the standard deviation of the population.</p> <p>So z is negative if the value \"x\" is less than the mean, and z is positive if the value is greater than the mean. If we define \"outliers\" as measurements that are greater than 4 standard deviations from the mean, then outliers are those measurements with \\(z&lt;-4\\) or \\(z&gt;4\\).</p> <p>Here is an interactive Ramachandran plot made using Plotly on Google Colab.</p> <p> </p> <p></p>"},{"location":"user-guide/md-analysis/ramachandran-plots/#ramachandran-plot-tools","title":"Ramachandran Plot Tools","text":"<p>ResearchGate: Tools for Ramachandran plot?. Many of the suggested sites are no longer online.</p> <p>Warwick: Generating Ramachandran (phi/psi) plots for Proteins</p> <p>Swift server</p>"},{"location":"user-guide/md-sims/mdsim-ff-water-model/","title":"Mdsim ff water model","text":"<p>Notes from ff19SB: Amino-Acid-Specific Protein Backbone Parameters Trained against Quantum Mechanics Energy Surfaces in Solution1</p> <p>Of the explicit water models tested here, we recommend use of OPC with ff19SB.</p> <p>From the GROMACS user manual</p> <p>GROMACS versions higher than 4.5 support the following AMBER force fields natively:</p> <ul> <li>AMBER94  </li> <li>AMBER96  </li> <li>AMBER99  </li> <li>AMBER99SB  </li> <li>AMBER99SB-ILDN  </li> <li>AMBER03  </li> <li>AMBERGS</li> </ul> <p>GROMACS supports the GROMOS force fields, with all parameters provided in the distribution for 43a1, 43a2, 45a3, 53a5, 53a6 and 54a7. The GROMOS force fields are united atom force fields, i.e. without explicit aliphatic (non-polar) hydrogens. ... GROMOS 43a1p - 43a1 modified to contain SEP (phosphoserine), TPO (phosphothreonine), and PTR (phosphotyrosine) (all PO42- forms), and SEPH, TPOH, PTRH (PO4H- forms).</p> <p>OpenMM does not support the Amber ff19SB protein force field.</p> <ol> <li> <p>Tian C, Kasavajhala K, Belfon KAA, Raguette L, Huang H, Migues AN et al. (2020) ff19SB: Amino-Acid-Specific Protein Backbone Parameters Trained against Quantum Mechanics Energy Surfaces in Solution. J Chem Theory Comput 16: 528-552. DOI: 10.1021/acs.jctc.9b00591 \u21a9</p> </li> </ol>"},{"location":"user-guide/md-sims/mdsim-general/","title":"General Considerations","text":""},{"location":"user-guide/md-sims/mdsim-general/#general-considerations","title":"General Considerations","text":"<p>from Knapp et al., 2018</p> <p>... a good rule of thumb is to perform a minimum of five to 10 replicas.</p>"},{"location":"user-guide/md-sims/mdsim-general/#resources","title":"Resources","text":"<ul> <li>Interactive Molecular Dynamics with GROMACS: This runs within VMD.</li> <li>Managing long simulations: There is a good section on reproducibility, which should be presented in class.</li> <li>Molecular Dynamics Simulation using Google Colab This builds GROMACS/NAMD on Colab.</li> <li>Installation of OpenMM on Google Colaboratory</li> <li>Biomolecular Simulation: OpenMM and MDAnalysis</li> <li>Molecular Dynamics simulations in Python This has a nice tutorial on Newton's Laws of Motion, and nice python exercises to illustrate them.</li> <li>Amber in Colab</li> <li>Running Molecular Dynamics with Amber on Compute Canada This has a nice set of mermaid diagrams for a MD simulation with AMBER.</li> </ul>"},{"location":"user-guide/md-sims/mdsim-general/#notes","title":"Notes","text":"<p>I would like to use the recently developed <code>ff19SB</code> AMBER force field[1]</p> <p>NOTE: AMBER22 is not free; the cost is ~$500.</p> <p>1. Tian C, Kasavajhala K, Belfon KAA, Raguette L, Huang H, Migues AN et al. (2020) ff19SB: Amino-Acid-Specific Protein Backbone Parameters Trained against Quantum Mechanics Energy Surfaces in Solution. J Chem Theory Comput 16: 528-552. DOI: 10.1021/acs.jctc.9b00591 \u21a9</p>"},{"location":"user-guide/md-sims/mdsim-gromacs/","title":"Molecular Dynamics Simulations with GROMACS","text":""},{"location":"user-guide/md-sims/mdsim-gromacs/#molecular-dynamics-simulations-with-gromacs","title":"Molecular Dynamics Simulations with GROMACS","text":"<p>These instructions were largely adapted from Installing Software on Google Colab for IBM3202 tutorials. I updated the GROMACS version, and to do that I needed to upgrade <code>cmake</code>.</p> <p>Installation of this software takes about 40 min. Therefore, we will save the compiled software on Google Drive to save time later.</p> <p>VERY IMPORTANT FIRST STEP: Go to the Menu \u2192 Runtime \u2192 Change Runtime Type and choose GPU!</p> <p>Note: a page reload will be required. This is okay.</p> <p>First, let's confirm that we are in the correct directory.</p> <pre><code>!pwd\n/content\n</code></pre>"},{"location":"user-guide/md-sims/mdsim-gromacs/#resources","title":"Resources","text":"<ul> <li>Interactive Molecular Dynamics with GROMACS: This runs within VMD.</li> <li>Managing long simulations: There is a good section on reproducibility, which should be presented in class.</li> <li>Molecular Dynamics Simulation using Google Colab This builds GROMACS/NAMD on Colab.</li> <li>Molecular Dynamics simulations in Python This has a nice tutorial on Newton's Laws of Motion, and nice python exercises to illustrate them.</li> </ul>"},{"location":"user-guide/md-sims/mdsim-gromacs/#trp-cage","title":"Trp-cage","text":"<p>2jof</p> <p>The tryptophan-cage (Trp-cage) is a stability (sic) folded mini protein</p>"},{"location":"user-guide/md-sims/mdsim-mdanalysis/","title":"MD Simulations Using MDAnalysis","text":""},{"location":"user-guide/md-sims/mdsim-mdanalysis/#md-simulations-using-mdanalysis","title":"MD Simulations Using MDAnalysis","text":""},{"location":"user-guide/md-sims/mdsim-mdanalysis/#resources","title":"Resources","text":"<p>LIgandbook Tutorial \u2013 simulation of Aspirin bound to Phospholipase-2A</p>"}]}